// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: private/pbconfigentry/config_entry.proto

package pbconfigentry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigEntryServiceClient is the client API for ConfigEntryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigEntryServiceClient interface {
	GetResolvedExportedServices(ctx context.Context, in *GetResolvedExportedServicesRequest, opts ...grpc.CallOption) (*GetResolvedExportedServicesResponse, error)
}

type configEntryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigEntryServiceClient(cc grpc.ClientConnInterface) ConfigEntryServiceClient {
	return &configEntryServiceClient{cc}
}

func (c *configEntryServiceClient) GetResolvedExportedServices(ctx context.Context, in *GetResolvedExportedServicesRequest, opts ...grpc.CallOption) (*GetResolvedExportedServicesResponse, error) {
	out := new(GetResolvedExportedServicesResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.consul.internal.configentry.ConfigEntryService/GetResolvedExportedServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigEntryServiceServer is the server API for ConfigEntryService service.
// All implementations should embed UnimplementedConfigEntryServiceServer
// for forward compatibility
type ConfigEntryServiceServer interface {
	GetResolvedExportedServices(context.Context, *GetResolvedExportedServicesRequest) (*GetResolvedExportedServicesResponse, error)
}

// UnimplementedConfigEntryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConfigEntryServiceServer struct {
}

func (UnimplementedConfigEntryServiceServer) GetResolvedExportedServices(context.Context, *GetResolvedExportedServicesRequest) (*GetResolvedExportedServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResolvedExportedServices not implemented")
}

// UnsafeConfigEntryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigEntryServiceServer will
// result in compilation errors.
type UnsafeConfigEntryServiceServer interface {
	mustEmbedUnimplementedConfigEntryServiceServer()
}

func RegisterConfigEntryServiceServer(s grpc.ServiceRegistrar, srv ConfigEntryServiceServer) {
	s.RegisterService(&ConfigEntryService_ServiceDesc, srv)
}

func _ConfigEntryService_GetResolvedExportedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResolvedExportedServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigEntryServiceServer).GetResolvedExportedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.consul.internal.configentry.ConfigEntryService/GetResolvedExportedServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigEntryServiceServer).GetResolvedExportedServices(ctx, req.(*GetResolvedExportedServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigEntryService_ServiceDesc is the grpc.ServiceDesc for ConfigEntryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigEntryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.consul.internal.configentry.ConfigEntryService",
	HandlerType: (*ConfigEntryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResolvedExportedServices",
			Handler:    _ConfigEntryService_GetResolvedExportedServices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "private/pbconfigentry/config_entry.proto",
}
