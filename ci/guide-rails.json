{
	"metadata": {
		"version": 1
	},
	"application": {
		"name": "consul",
		"language": "GOLANG",
		"artifact_store": {
			"type": "s3",
			"repositories": [
				{
					"category": "rc-packaging",
					"bucket": "guide-rails-calculi-rc"
				},
				{
					"category": "final-packaging",
					"bucket": "guide-rails-calculi-final"
				},
				{
					"category": "logs",
					"bucket": "guide-rails-calculi-logs"
				}
			]
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"job_steps": [
					{
						"name": "Get Dependencies",
						"definition": "Get Dependencies",
						"command": "go get -t -d ./...",
						"properties": null
					},
					{
						"name": "Unit Tests and Coverage",
						"definition": "Unit Tests and Coverage",
						"command": "ginkgo -cover -r -v -skipPackage=pb,test -outputdir=./ | tee ginkgo.output\ncat ginkgo.output 2\u003e\u00261 | go-junit-report \u003e test.xml\ngocov convert *.coverprofile | gocov-xml \u003e coverage.xml",
						"properties": null
					},
					{
						"name": "Build",
						"definition": "Build",
						"command": "go build -o ((application.name))",
						"properties": null
					},
					{
						"name": "Lint",
						"definition": "Lint",
						"command": "set +e; gometalinter ./... --cyclo-over=10 --line-length=120 --deadline=180s --vendored-linters  --checkstyle --skip=test --skip=mock --skip=vendor --exclude=_test.go --exclude=.pb.go \u003e report.xml; set -e",
						"properties": null
					},
					{
						"name": "GetTools",
						"definition": "GetTools",
						"command": "go get github.com/axw/gocov/gocov\ngo get github.com/AlekSi/gocov-xml\ngo get -u github.com/jstemmer/go-junit-report\ncp ${GOPATH}/bin/gocov* ${GOPATH}/bin/go-junit-report .",
						"properties": null
					},
					{
						"name": "Build Instrumented",
						"definition": "Build Instrumented",
						"command": "go test -c -coverpkg=all -covermode=count -o ((application.name))-instrumented",
						"properties": null
					},
					{
						"name": "Build Isolation Test",
						"definition": "Build Isolation Test",
						"command": "cd test/isolation\ngo test -c -coverpkg=all -covermode=count -o ((application.name))-isolation.test",
						"properties": null
					},
					{
						"name": "Build Integration Test",
						"definition": "Build Integration Test",
						"command": "cd test/integration\ngo test -c -coverpkg=all -covermode=count -o ((application.name))-integration.test",
						"properties": null
					}
				],
				"exit_actions": {
					"default": {
						"fetch_logs": true,
						"code_analysis": {
							"publish": true,
							"properties": null
						},
						"delete_instances": true
					},
					"on_success": {
						"code_analysis": null
					},
					"on_failure": {
						"code_analysis": null
					},
					"on_abort": {
						"code_analysis": null
					}
				},
				"properties": [
					{
						"name": "gopath",
						"description": "GOPATH is set to ${SEGMENT_BASE_DIR}/cache/go by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created",
						"value": "${SEGMENT_BASE_DIR}/cache/go"
					}
				],
				"deployment_strategy": {},
				"application_init": {
					"command": "",
					"arguments": null
				},
				"packages": [
					{
						"name": "((application.name))",
						"dependencies": [],
						"downloads": [],
						"files": [
							"((application.name))*"
						],
						"package_install_command": "",
						"installed_path": ""
					}
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"post_deployment_actions": {
					"instances": null,
					"loadbalanced": false,
					"loadbalancer": {
						"TargetGroupName": "",
						"TargetGroupPort": 0,
						"TargetGroupProtocol": "",
						"TargetType": "",
						"VPCID": "",
						"HealthCheckEnabled": false,
						"HealthCheckPort": "",
						"UnhealthyThresholdCount": 0
					}
				},
				"cache_info": {
					"paths": [
						"((gopath))"
					]
				}
			}
		],
		"exit_actions": {
			"default": {
				"fetch_logs": true,
				"code_analysis": {
					"publish": true,
					"properties": null
				},
				"delete_instances": true
			},
			"on_success": {
				"code_analysis": null
			},
			"on_failure": {
				"code_analysis": null
			},
			"on_abort": {
				"code_analysis": null
			}
		},
		"default_properties": null,
		"deployment_files": [],
		"application_init": {
			"command": "",
			"arguments": null
		},
		"process": {
			"init": {
				"command": "bin/start-service.sh"
			}
		},
		"releases": []
	},
	"organization": {
		"orgname": "TestOrg"
	}
}