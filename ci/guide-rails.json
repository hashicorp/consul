{
	"metadata": {
		"version": 1
	},
	"application": {
		"name": "consul",
		"language": "GOLANG",
		"artifact_store": {
			"type": "s3",
			"repositories": [
				{
					"category": "rc-packaging",
					"bucket": "guide-rails-calculi-rc"
				},
				{
					"category": "final-packaging",
					"bucket": "guide-rails-calculi-final"
				},
				{
					"category": "logs",
					"bucket": "guide-rails-calculi-logs"
				}
			]
		}
	},
	"pipeline": {
		"segments": [
			{
				"name": "Build",
				"segment_type": "build",
				"job_steps": [
					{
						"name": "Echo Env",
						"definition": "Echo Env",
						"command": "env | sort",
						"properties": null
					},
					{
						"name": "Get Dependencies",
						"definition": "Get Dependencies",
						"command": "go get -u -d ./...",
						"properties": null
					},
					{
						"name": "Unit Tests and Coverage",
						"definition": "Unit Tests and Coverage",
						"command": "set -x\nginkgo -cover -r -v  -outputdir=./ | tee ginkgo.output\nrc=${PIPESTATUS[0]}\n\necho \"Exited ginkgo with status of ${rc}\"\ncp ginkgo.output \"${BUILD_LOGS_DIR}/.\"\ncp *.coverprofile coverage.xml test.xml \"${BUILD_LOGS_DIR}/.\"\n\ncat ginkgo.output | go-junit-report \u003e test.xml\ncp test.xml \"${BUILD_LOGS_DIR}/.\"\n\ngocov convert *.coverprofile | gocov-xml \u003e coverage.xml\ncp coverage.xml \"${BUILD_LOGS_DIR}/.\"\n\nexit ${rc}",
						"properties": null
					}
				],
				"exit_actions": {
					"default": {
						"fetch_logs": true,
						"code_analysis": {
							"publish": true,
							"properties": null
						},
						"delete_instances": true
					},
					"on_success": {
						"code_analysis": null
					},
					"on_failure": {
						"code_analysis": null
					},
					"on_abort": {
						"code_analysis": null
					}
				},
				"properties": [
					{
						"name": "gopath",
						"description": "GOPATH is set to ${SEGMENT_BASE_DIR}/cache/go by default, when caching is enabled. Caches are maintained on the worker where your build gets allocated. For a new worker assigned to the build, the cache will be re-created",
						"value": "${SEGMENT_BASE_DIR}/cache/go"
					}
				],
				"deployment_strategy": {},
				"application_init": {
					"command": "",
					"arguments": null
				},
				"packages": [
					{
						"name": "((application.name))",
						"dependencies": [],
						"downloads": [],
						"files": [
							"((application.name))*"
						],
						"package_install_command": "",
						"installed_path": ""
					}
				],
				"instance_tags": [
					{
						"name": "application.name",
						"value": "((application.name))"
					}
				],
				"post_deployment_actions": {
					"instances": null,
					"loadbalanced": false,
					"loadbalancer": {
						"TargetGroupName": "",
						"TargetGroupPort": 0,
						"TargetGroupProtocol": "",
						"TargetType": "",
						"VPCID": "",
						"HealthCheckEnabled": false,
						"HealthCheckPort": "",
						"UnhealthyThresholdCount": 0
					}
				},
				"cache_info": {
					"enabled": true,
					"paths": [
						"((gopath))"
					]
				}
			}
		],
		"exit_actions": {
			"default": {
				"fetch_logs": true,
				"code_analysis": {
					"publish": true,
					"properties": null
				},
				"delete_instances": true
			},
			"on_success": {
				"code_analysis": null
			},
			"on_failure": {
				"code_analysis": null
			},
			"on_abort": {
				"code_analysis": null
			}
		},
		"default_properties": [
			{
				"name": "additional_properties_file",
				"value": "sonar.properties",
				"type": "string"
			}
		],
		"deployment_files": [],
		"application_init": {
			"command": "",
			"arguments": null
		},
		"process": {
			"init": {
				"command": "bin/start-service.sh"
			}
		},
		"releases": []
	},
	"organization": {
		"orgname": "TestOrg"
	}
}