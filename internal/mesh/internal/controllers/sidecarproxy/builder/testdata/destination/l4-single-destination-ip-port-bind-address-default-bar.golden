{
  "proxyState": {
    "clusters": {
      "null_route_cluster": {
        "endpointGroup": {
          "static": {
            "config": {
              "connectTimeout": "10s"
            }
          }
        },
        "name": "null_route_cluster",
        "protocol": "PROTOCOL_TCP"
      },
      "tcp.api-1.bar.dc1.internal.foo.consul": {
        "altStatName": "tcp.api-1.bar.dc1.internal.foo.consul",
        "endpointGroup": {
          "dynamic": {
            "config": {
              "connectTimeout": "5s",
              "disablePanicThreshold": true
            },
            "outboundTls": {
              "alpnProtocols": [
                "consul~tcp"
              ],
              "outboundMesh": {
                "identityKey": "test-identity",
                "sni": "api-1.bar.dc1.internal.foo.consul",
                "validationContext": {
                  "spiffeIds": [
                    "spiffe://foo.consul/ap/default/ns/bar/identity/api1-identity"
                  ],
                  "trustBundlePeerNameKey": "local"
                }
              }
            }
          }
        },
        "name": "tcp.api-1.bar.dc1.internal.foo.consul",
        "protocol": "PROTOCOL_TCP"
      },
      "tcp.api-2.bar.dc1.internal.foo.consul": {
        "altStatName": "tcp.api-2.bar.dc1.internal.foo.consul",
        "endpointGroup": {
          "dynamic": {
            "config": {
              "connectTimeout": "5s",
              "disablePanicThreshold": true
            },
            "outboundTls": {
              "alpnProtocols": [
                "consul~tcp"
              ],
              "outboundMesh": {
                "identityKey": "test-identity",
                "sni": "api-2.bar.dc1.internal.foo.consul",
                "validationContext": {
                  "spiffeIds": [
                    "spiffe://foo.consul/ap/default/ns/bar/identity/api2-identity"
                  ],
                  "trustBundlePeerNameKey": "local"
                }
              }
            }
          }
        },
        "name": "tcp.api-2.bar.dc1.internal.foo.consul",
        "protocol": "PROTOCOL_TCP"
      }
    },
    "identity": {
      "name": "test-identity",
      "tenancy": {
        "namespace": "bar",
        "partition": "default"
      },
      "type": {
        "group": "auth",
        "groupVersion": "v2beta1",
        "kind": "WorkloadIdentity"
      }
    },
    "listeners": [
      {
        "direction": "DIRECTION_OUTBOUND",
        "hostPort": {
          "host": "1.1.1.1",
          "port": 1234
        },
        "name": "default/bar/api-1:tcp:1.1.1.1:1234",
        "routers": [
          {
            "l4": {
              "statPrefix": "upstream.tcp.api-1.bar.default.dc1",
              "weightedClusters": {
                "clusters": [
                  {
                    "name": "tcp.api-2.bar.dc1.internal.foo.consul",
                    "weight": 60
                  },
                  {
                    "name": "tcp.api-1.bar.dc1.internal.foo.consul",
                    "weight": 40
                  },
                  {
                    "name": "null_route_cluster",
                    "weight": 10
                  }
                ]
              }
            }
          }
        ]
      }
    ]
  },
  "requiredEndpoints": {
    "tcp.api-1.bar.dc1.internal.foo.consul": {
      "id": {
        "name": "api-1",
        "tenancy": {
          "namespace": "bar",
          "partition": "default"
        },
        "type": {
          "group": "catalog",
          "groupVersion": "v2beta1",
          "kind": "ServiceEndpoints"
        }
      },
      "meshPort": "mesh",
      "routePort": "tcp"
    },
    "tcp.api-2.bar.dc1.internal.foo.consul": {
      "id": {
        "name": "api-2",
        "tenancy": {
          "namespace": "bar",
          "partition": "default"
        },
        "type": {
          "group": "catalog",
          "groupVersion": "v2beta1",
          "kind": "ServiceEndpoints"
        }
      },
      "meshPort": "mesh",
      "routePort": "tcp"
    }
  },
  "requiredLeafCertificates": {
    "test-identity": {
      "name": "test-identity",
      "namespace": "bar",
      "partition": "default"
    }
  },
  "requiredTrustBundles": {
    "local": {
      "peer": "local"
    }
  }
}
