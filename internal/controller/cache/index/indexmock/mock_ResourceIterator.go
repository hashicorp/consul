// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package indexmock

import (
	"github.com/hashicorp/consul/proto-public/pbresource"
	mock "github.com/stretchr/testify/mock"
)

// newResourceIterator creates a new instance of resourceIterator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newResourceIterator(t interface {
	mock.TestingT
	Cleanup(func())
}) *resourceIterator {
	mock := &resourceIterator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// resourceIterator is an autogenerated mock type for the ResourceIterator type
type resourceIterator struct {
	mock.Mock
}

type resourceIterator_Expecter struct {
	mock *mock.Mock
}

func (_m *resourceIterator) EXPECT() *resourceIterator_Expecter {
	return &resourceIterator_Expecter{mock: &_m.Mock}
}

// Next provides a mock function for the type resourceIterator
func (_mock *resourceIterator) Next() *pbresource.Resource {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 *pbresource.Resource
	if returnFunc, ok := ret.Get(0).(func() *pbresource.Resource); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.Resource)
		}
	}
	return r0
}

// resourceIterator_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type resourceIterator_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
func (_e *resourceIterator_Expecter) Next() *resourceIterator_Next_Call {
	return &resourceIterator_Next_Call{Call: _e.mock.On("Next")}
}

func (_c *resourceIterator_Next_Call) Run(run func()) *resourceIterator_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *resourceIterator_Next_Call) Return(resource *pbresource.Resource) *resourceIterator_Next_Call {
	_c.Call.Return(resource)
	return _c
}

func (_c *resourceIterator_Next_Call) RunAndReturn(run func() *pbresource.Resource) *resourceIterator_Next_Call {
	_c.Call.Return(run)
	return _c
}
