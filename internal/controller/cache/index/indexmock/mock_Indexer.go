// Code generated by mockery v2.37.1. DO NOT EDIT.

package indexmock

import mock "github.com/stretchr/testify/mock"

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

type Indexer_Expecter struct {
	mock *mock.Mock
}

func (_m *Indexer) EXPECT() *Indexer_Expecter {
	return &Indexer_Expecter{mock: &_m.Mock}
}

// FromArgs provides a mock function with given fields: args
func (_m *Indexer) FromArgs(args ...interface{}) ([]byte, error) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) ([]byte, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) []byte); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Indexer_FromArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromArgs'
type Indexer_FromArgs_Call struct {
	*mock.Call
}

// FromArgs is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Indexer_Expecter) FromArgs(args ...interface{}) *Indexer_FromArgs_Call {
	return &Indexer_FromArgs_Call{Call: _e.mock.On("FromArgs",
		append([]interface{}{}, args...)...)}
}

func (_c *Indexer_FromArgs_Call) Run(run func(args ...interface{})) *Indexer_FromArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Indexer_FromArgs_Call) Return(_a0 []byte, _a1 error) *Indexer_FromArgs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Indexer_FromArgs_Call) RunAndReturn(run func(...interface{}) ([]byte, error)) *Indexer_FromArgs_Call {
	_c.Call.Return(run)
	return _c
}

// NewIndexer creates a new instance of Indexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Indexer {
	mock := &Indexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
