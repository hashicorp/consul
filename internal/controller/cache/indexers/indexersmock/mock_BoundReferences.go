// Code generated by mockery v2.37.1. DO NOT EDIT.

package indexersmock

import (
	pbresource "github.com/hashicorp/consul/proto-public/pbresource"
	mock "github.com/stretchr/testify/mock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// BoundReferences is an autogenerated mock type for the BoundReferences type
type BoundReferences struct {
	mock.Mock
}

type BoundReferences_Expecter struct {
	mock *mock.Mock
}

func (_m *BoundReferences) EXPECT() *BoundReferences_Expecter {
	return &BoundReferences_Expecter{mock: &_m.Mock}
}

// GetBoundReferences provides a mock function with given fields:
func (_m *BoundReferences) GetBoundReferences() []*pbresource.Reference {
	ret := _m.Called()

	var r0 []*pbresource.Reference
	if rf, ok := ret.Get(0).(func() []*pbresource.Reference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pbresource.Reference)
		}
	}

	return r0
}

// BoundReferences_GetBoundReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoundReferences'
type BoundReferences_GetBoundReferences_Call struct {
	*mock.Call
}

// GetBoundReferences is a helper method to define mock.On call
func (_e *BoundReferences_Expecter) GetBoundReferences() *BoundReferences_GetBoundReferences_Call {
	return &BoundReferences_GetBoundReferences_Call{Call: _e.mock.On("GetBoundReferences")}
}

func (_c *BoundReferences_GetBoundReferences_Call) Run(run func()) *BoundReferences_GetBoundReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BoundReferences_GetBoundReferences_Call) Return(_a0 []*pbresource.Reference) *BoundReferences_GetBoundReferences_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BoundReferences_GetBoundReferences_Call) RunAndReturn(run func() []*pbresource.Reference) *BoundReferences_GetBoundReferences_Call {
	_c.Call.Return(run)
	return _c
}

// ProtoReflect provides a mock function with given fields:
func (_m *BoundReferences) ProtoReflect() protoreflect.Message {
	ret := _m.Called()

	var r0 protoreflect.Message
	if rf, ok := ret.Get(0).(func() protoreflect.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.Message)
		}
	}

	return r0
}

// BoundReferences_ProtoReflect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtoReflect'
type BoundReferences_ProtoReflect_Call struct {
	*mock.Call
}

// ProtoReflect is a helper method to define mock.On call
func (_e *BoundReferences_Expecter) ProtoReflect() *BoundReferences_ProtoReflect_Call {
	return &BoundReferences_ProtoReflect_Call{Call: _e.mock.On("ProtoReflect")}
}

func (_c *BoundReferences_ProtoReflect_Call) Run(run func()) *BoundReferences_ProtoReflect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BoundReferences_ProtoReflect_Call) Return(_a0 protoreflect.Message) *BoundReferences_ProtoReflect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BoundReferences_ProtoReflect_Call) RunAndReturn(run func() protoreflect.Message) *BoundReferences_ProtoReflect_Call {
	_c.Call.Return(run)
	return _c
}

// NewBoundReferences creates a new instance of BoundReferences. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBoundReferences(t interface {
	mock.TestingT
	Cleanup(func())
}) *BoundReferences {
	mock := &BoundReferences{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
