// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/admin/v2alpha/config_dump.proto

package envoy_admin_v2alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _config_dump_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ConfigDump with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ConfigDump) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetConfigs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigDumpValidationError{
					field:  fmt.Sprintf("Configs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ConfigDumpValidationError is the validation error returned by
// ConfigDump.Validate if the designated constraints aren't met.
type ConfigDumpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigDumpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigDumpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigDumpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigDumpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigDumpValidationError) ErrorName() string { return "ConfigDumpValidationError" }

// Error satisfies the builtin error interface
func (e ConfigDumpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigDump.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigDumpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigDumpValidationError{}

// Validate checks the field values on UpdateFailureState with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateFailureState) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFailedConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFailureStateValidationError{
				field:  "FailedConfiguration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpdateAttempt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFailureStateValidationError{
				field:  "LastUpdateAttempt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Details

	return nil
}

// UpdateFailureStateValidationError is the validation error returned by
// UpdateFailureState.Validate if the designated constraints aren't met.
type UpdateFailureStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFailureStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFailureStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFailureStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFailureStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFailureStateValidationError) ErrorName() string {
	return "UpdateFailureStateValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFailureStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFailureState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFailureStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFailureStateValidationError{}

// Validate checks the field values on BootstrapConfigDump with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BootstrapConfigDump) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBootstrap()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapConfigDumpValidationError{
				field:  "Bootstrap",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapConfigDumpValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BootstrapConfigDumpValidationError is the validation error returned by
// BootstrapConfigDump.Validate if the designated constraints aren't met.
type BootstrapConfigDumpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapConfigDumpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapConfigDumpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapConfigDumpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapConfigDumpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapConfigDumpValidationError) ErrorName() string {
	return "BootstrapConfigDumpValidationError"
}

// Error satisfies the builtin error interface
func (e BootstrapConfigDumpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrapConfigDump.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapConfigDumpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapConfigDumpValidationError{}

// Validate checks the field values on ListenersConfigDump with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListenersConfigDump) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VersionInfo

	for idx, item := range m.GetStaticListeners() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListenersConfigDumpValidationError{
					field:  fmt.Sprintf("StaticListeners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDynamicListeners() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListenersConfigDumpValidationError{
					field:  fmt.Sprintf("DynamicListeners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListenersConfigDumpValidationError is the validation error returned by
// ListenersConfigDump.Validate if the designated constraints aren't met.
type ListenersConfigDumpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenersConfigDumpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenersConfigDumpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenersConfigDumpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenersConfigDumpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenersConfigDumpValidationError) ErrorName() string {
	return "ListenersConfigDumpValidationError"
}

// Error satisfies the builtin error interface
func (e ListenersConfigDumpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListenersConfigDump.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenersConfigDumpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenersConfigDumpValidationError{}

// Validate checks the field values on ClustersConfigDump with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClustersConfigDump) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VersionInfo

	for idx, item := range m.GetStaticClusters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClustersConfigDumpValidationError{
					field:  fmt.Sprintf("StaticClusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDynamicActiveClusters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClustersConfigDumpValidationError{
					field:  fmt.Sprintf("DynamicActiveClusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDynamicWarmingClusters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClustersConfigDumpValidationError{
					field:  fmt.Sprintf("DynamicWarmingClusters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ClustersConfigDumpValidationError is the validation error returned by
// ClustersConfigDump.Validate if the designated constraints aren't met.
type ClustersConfigDumpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClustersConfigDumpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClustersConfigDumpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClustersConfigDumpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClustersConfigDumpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClustersConfigDumpValidationError) ErrorName() string {
	return "ClustersConfigDumpValidationError"
}

// Error satisfies the builtin error interface
func (e ClustersConfigDumpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClustersConfigDump.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClustersConfigDumpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClustersConfigDumpValidationError{}

// Validate checks the field values on RoutesConfigDump with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RoutesConfigDump) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetStaticRouteConfigs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoutesConfigDumpValidationError{
					field:  fmt.Sprintf("StaticRouteConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDynamicRouteConfigs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoutesConfigDumpValidationError{
					field:  fmt.Sprintf("DynamicRouteConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// RoutesConfigDumpValidationError is the validation error returned by
// RoutesConfigDump.Validate if the designated constraints aren't met.
type RoutesConfigDumpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutesConfigDumpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutesConfigDumpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutesConfigDumpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutesConfigDumpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutesConfigDumpValidationError) ErrorName() string { return "RoutesConfigDumpValidationError" }

// Error satisfies the builtin error interface
func (e RoutesConfigDumpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutesConfigDump.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutesConfigDumpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutesConfigDumpValidationError{}

// Validate checks the field values on ScopedRoutesConfigDump with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ScopedRoutesConfigDump) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInlineScopedRouteConfigs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScopedRoutesConfigDumpValidationError{
					field:  fmt.Sprintf("InlineScopedRouteConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDynamicScopedRouteConfigs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScopedRoutesConfigDumpValidationError{
					field:  fmt.Sprintf("DynamicScopedRouteConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ScopedRoutesConfigDumpValidationError is the validation error returned by
// ScopedRoutesConfigDump.Validate if the designated constraints aren't met.
type ScopedRoutesConfigDumpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopedRoutesConfigDumpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopedRoutesConfigDumpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScopedRoutesConfigDumpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopedRoutesConfigDumpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopedRoutesConfigDumpValidationError) ErrorName() string {
	return "ScopedRoutesConfigDumpValidationError"
}

// Error satisfies the builtin error interface
func (e ScopedRoutesConfigDumpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopedRoutesConfigDump.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopedRoutesConfigDumpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopedRoutesConfigDumpValidationError{}

// Validate checks the field values on SecretsConfigDump with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SecretsConfigDump) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetStaticSecrets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretsConfigDumpValidationError{
					field:  fmt.Sprintf("StaticSecrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDynamicActiveSecrets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretsConfigDumpValidationError{
					field:  fmt.Sprintf("DynamicActiveSecrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDynamicWarmingSecrets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SecretsConfigDumpValidationError{
					field:  fmt.Sprintf("DynamicWarmingSecrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SecretsConfigDumpValidationError is the validation error returned by
// SecretsConfigDump.Validate if the designated constraints aren't met.
type SecretsConfigDumpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretsConfigDumpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretsConfigDumpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretsConfigDumpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretsConfigDumpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretsConfigDumpValidationError) ErrorName() string {
	return "SecretsConfigDumpValidationError"
}

// Error satisfies the builtin error interface
func (e SecretsConfigDumpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretsConfigDump.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretsConfigDumpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretsConfigDumpValidationError{}

// Validate checks the field values on ListenersConfigDump_StaticListener with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListenersConfigDump_StaticListener) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetListener()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenersConfigDump_StaticListenerValidationError{
				field:  "Listener",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenersConfigDump_StaticListenerValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListenersConfigDump_StaticListenerValidationError is the validation error
// returned by ListenersConfigDump_StaticListener.Validate if the designated
// constraints aren't met.
type ListenersConfigDump_StaticListenerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenersConfigDump_StaticListenerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenersConfigDump_StaticListenerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenersConfigDump_StaticListenerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenersConfigDump_StaticListenerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenersConfigDump_StaticListenerValidationError) ErrorName() string {
	return "ListenersConfigDump_StaticListenerValidationError"
}

// Error satisfies the builtin error interface
func (e ListenersConfigDump_StaticListenerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListenersConfigDump_StaticListener.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenersConfigDump_StaticListenerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenersConfigDump_StaticListenerValidationError{}

// Validate checks the field values on ListenersConfigDump_DynamicListenerState
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListenersConfigDump_DynamicListenerState) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VersionInfo

	if v, ok := interface{}(m.GetListener()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenersConfigDump_DynamicListenerStateValidationError{
				field:  "Listener",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenersConfigDump_DynamicListenerStateValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListenersConfigDump_DynamicListenerStateValidationError is the validation
// error returned by ListenersConfigDump_DynamicListenerState.Validate if the
// designated constraints aren't met.
type ListenersConfigDump_DynamicListenerStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenersConfigDump_DynamicListenerStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenersConfigDump_DynamicListenerStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenersConfigDump_DynamicListenerStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenersConfigDump_DynamicListenerStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenersConfigDump_DynamicListenerStateValidationError) ErrorName() string {
	return "ListenersConfigDump_DynamicListenerStateValidationError"
}

// Error satisfies the builtin error interface
func (e ListenersConfigDump_DynamicListenerStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListenersConfigDump_DynamicListenerState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenersConfigDump_DynamicListenerStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenersConfigDump_DynamicListenerStateValidationError{}

// Validate checks the field values on ListenersConfigDump_DynamicListener with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListenersConfigDump_DynamicListener) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetActiveState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenersConfigDump_DynamicListenerValidationError{
				field:  "ActiveState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetWarmingState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenersConfigDump_DynamicListenerValidationError{
				field:  "WarmingState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDrainingState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenersConfigDump_DynamicListenerValidationError{
				field:  "DrainingState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetErrorState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListenersConfigDump_DynamicListenerValidationError{
				field:  "ErrorState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListenersConfigDump_DynamicListenerValidationError is the validation error
// returned by ListenersConfigDump_DynamicListener.Validate if the designated
// constraints aren't met.
type ListenersConfigDump_DynamicListenerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListenersConfigDump_DynamicListenerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListenersConfigDump_DynamicListenerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListenersConfigDump_DynamicListenerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListenersConfigDump_DynamicListenerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListenersConfigDump_DynamicListenerValidationError) ErrorName() string {
	return "ListenersConfigDump_DynamicListenerValidationError"
}

// Error satisfies the builtin error interface
func (e ListenersConfigDump_DynamicListenerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListenersConfigDump_DynamicListener.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListenersConfigDump_DynamicListenerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListenersConfigDump_DynamicListenerValidationError{}

// Validate checks the field values on ClustersConfigDump_StaticCluster with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ClustersConfigDump_StaticCluster) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClustersConfigDump_StaticClusterValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClustersConfigDump_StaticClusterValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClustersConfigDump_StaticClusterValidationError is the validation error
// returned by ClustersConfigDump_StaticCluster.Validate if the designated
// constraints aren't met.
type ClustersConfigDump_StaticClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClustersConfigDump_StaticClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClustersConfigDump_StaticClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClustersConfigDump_StaticClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClustersConfigDump_StaticClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClustersConfigDump_StaticClusterValidationError) ErrorName() string {
	return "ClustersConfigDump_StaticClusterValidationError"
}

// Error satisfies the builtin error interface
func (e ClustersConfigDump_StaticClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClustersConfigDump_StaticCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClustersConfigDump_StaticClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClustersConfigDump_StaticClusterValidationError{}

// Validate checks the field values on ClustersConfigDump_DynamicCluster with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ClustersConfigDump_DynamicCluster) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VersionInfo

	if v, ok := interface{}(m.GetCluster()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClustersConfigDump_DynamicClusterValidationError{
				field:  "Cluster",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClustersConfigDump_DynamicClusterValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClustersConfigDump_DynamicClusterValidationError is the validation error
// returned by ClustersConfigDump_DynamicCluster.Validate if the designated
// constraints aren't met.
type ClustersConfigDump_DynamicClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClustersConfigDump_DynamicClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClustersConfigDump_DynamicClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClustersConfigDump_DynamicClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClustersConfigDump_DynamicClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClustersConfigDump_DynamicClusterValidationError) ErrorName() string {
	return "ClustersConfigDump_DynamicClusterValidationError"
}

// Error satisfies the builtin error interface
func (e ClustersConfigDump_DynamicClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClustersConfigDump_DynamicCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClustersConfigDump_DynamicClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClustersConfigDump_DynamicClusterValidationError{}

// Validate checks the field values on RoutesConfigDump_StaticRouteConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RoutesConfigDump_StaticRouteConfig) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRouteConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutesConfigDump_StaticRouteConfigValidationError{
				field:  "RouteConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutesConfigDump_StaticRouteConfigValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RoutesConfigDump_StaticRouteConfigValidationError is the validation error
// returned by RoutesConfigDump_StaticRouteConfig.Validate if the designated
// constraints aren't met.
type RoutesConfigDump_StaticRouteConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutesConfigDump_StaticRouteConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutesConfigDump_StaticRouteConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutesConfigDump_StaticRouteConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutesConfigDump_StaticRouteConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutesConfigDump_StaticRouteConfigValidationError) ErrorName() string {
	return "RoutesConfigDump_StaticRouteConfigValidationError"
}

// Error satisfies the builtin error interface
func (e RoutesConfigDump_StaticRouteConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutesConfigDump_StaticRouteConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutesConfigDump_StaticRouteConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutesConfigDump_StaticRouteConfigValidationError{}

// Validate checks the field values on RoutesConfigDump_DynamicRouteConfig with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RoutesConfigDump_DynamicRouteConfig) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for VersionInfo

	if v, ok := interface{}(m.GetRouteConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutesConfigDump_DynamicRouteConfigValidationError{
				field:  "RouteConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoutesConfigDump_DynamicRouteConfigValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RoutesConfigDump_DynamicRouteConfigValidationError is the validation error
// returned by RoutesConfigDump_DynamicRouteConfig.Validate if the designated
// constraints aren't met.
type RoutesConfigDump_DynamicRouteConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutesConfigDump_DynamicRouteConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutesConfigDump_DynamicRouteConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutesConfigDump_DynamicRouteConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutesConfigDump_DynamicRouteConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutesConfigDump_DynamicRouteConfigValidationError) ErrorName() string {
	return "RoutesConfigDump_DynamicRouteConfigValidationError"
}

// Error satisfies the builtin error interface
func (e RoutesConfigDump_DynamicRouteConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutesConfigDump_DynamicRouteConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutesConfigDump_DynamicRouteConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutesConfigDump_DynamicRouteConfigValidationError{}

// Validate checks the field values on
// ScopedRoutesConfigDump_InlineScopedRouteConfigs with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScopedRoutesConfigDump_InlineScopedRouteConfigs) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for idx, item := range m.GetScopedRouteConfigs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError{
					field:  fmt.Sprintf("ScopedRouteConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError is the
// validation error returned by
// ScopedRoutesConfigDump_InlineScopedRouteConfigs.Validate if the designated
// constraints aren't met.
type ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError) ErrorName() string {
	return "ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError"
}

// Error satisfies the builtin error interface
func (e ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopedRoutesConfigDump_InlineScopedRouteConfigs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopedRoutesConfigDump_InlineScopedRouteConfigsValidationError{}

// Validate checks the field values on
// ScopedRoutesConfigDump_DynamicScopedRouteConfigs with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ScopedRoutesConfigDump_DynamicScopedRouteConfigs) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for VersionInfo

	for idx, item := range m.GetScopedRouteConfigs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError{
					field:  fmt.Sprintf("ScopedRouteConfigs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError is the
// validation error returned by
// ScopedRoutesConfigDump_DynamicScopedRouteConfigs.Validate if the designated
// constraints aren't met.
type ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError) ErrorName() string {
	return "ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError"
}

// Error satisfies the builtin error interface
func (e ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScopedRoutesConfigDump_DynamicScopedRouteConfigs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScopedRoutesConfigDump_DynamicScopedRouteConfigsValidationError{}

// Validate checks the field values on SecretsConfigDump_DynamicSecret with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SecretsConfigDump_DynamicSecret) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for VersionInfo

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretsConfigDump_DynamicSecretValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretsConfigDump_DynamicSecretValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SecretsConfigDump_DynamicSecretValidationError is the validation error
// returned by SecretsConfigDump_DynamicSecret.Validate if the designated
// constraints aren't met.
type SecretsConfigDump_DynamicSecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretsConfigDump_DynamicSecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretsConfigDump_DynamicSecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretsConfigDump_DynamicSecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretsConfigDump_DynamicSecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretsConfigDump_DynamicSecretValidationError) ErrorName() string {
	return "SecretsConfigDump_DynamicSecretValidationError"
}

// Error satisfies the builtin error interface
func (e SecretsConfigDump_DynamicSecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretsConfigDump_DynamicSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretsConfigDump_DynamicSecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretsConfigDump_DynamicSecretValidationError{}

// Validate checks the field values on SecretsConfigDump_StaticSecret with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SecretsConfigDump_StaticSecret) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetLastUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretsConfigDump_StaticSecretValidationError{
				field:  "LastUpdated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretsConfigDump_StaticSecretValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SecretsConfigDump_StaticSecretValidationError is the validation error
// returned by SecretsConfigDump_StaticSecret.Validate if the designated
// constraints aren't met.
type SecretsConfigDump_StaticSecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretsConfigDump_StaticSecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretsConfigDump_StaticSecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretsConfigDump_StaticSecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretsConfigDump_StaticSecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretsConfigDump_StaticSecretValidationError) ErrorName() string {
	return "SecretsConfigDump_StaticSecretValidationError"
}

// Error satisfies the builtin error interface
func (e SecretsConfigDump_StaticSecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecretsConfigDump_StaticSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretsConfigDump_StaticSecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretsConfigDump_StaticSecretValidationError{}
