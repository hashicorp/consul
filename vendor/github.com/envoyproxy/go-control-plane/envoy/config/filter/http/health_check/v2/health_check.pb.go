// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/health_check/v2/health_check.proto

package envoy_config_filter_http_health_check_v2

import (
	fmt "fmt"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	route "github.com/envoyproxy/go-control-plane/envoy/api/v2/route"
	_type "github.com/envoyproxy/go-control-plane/envoy/type"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthCheck struct {
	PassThroughMode              *wrappers.BoolValue       `protobuf:"bytes,1,opt,name=pass_through_mode,json=passThroughMode,proto3" json:"pass_through_mode,omitempty"`
	CacheTime                    *duration.Duration        `protobuf:"bytes,3,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
	ClusterMinHealthyPercentages map[string]*_type.Percent `protobuf:"bytes,4,rep,name=cluster_min_healthy_percentages,json=clusterMinHealthyPercentages,proto3" json:"cluster_min_healthy_percentages,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Headers                      []*route.HeaderMatcher    `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral         struct{}                  `json:"-"`
	XXX_unrecognized             []byte                    `json:"-"`
	XXX_sizecache                int32                     `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_75439d7b4d98e201, []int{0}
}

func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck.Size(m)
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetPassThroughMode() *wrappers.BoolValue {
	if m != nil {
		return m.PassThroughMode
	}
	return nil
}

func (m *HealthCheck) GetCacheTime() *duration.Duration {
	if m != nil {
		return m.CacheTime
	}
	return nil
}

func (m *HealthCheck) GetClusterMinHealthyPercentages() map[string]*_type.Percent {
	if m != nil {
		return m.ClusterMinHealthyPercentages
	}
	return nil
}

func (m *HealthCheck) GetHeaders() []*route.HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthCheck)(nil), "envoy.config.filter.http.health_check.v2.HealthCheck")
	proto.RegisterMapType((map[string]*_type.Percent)(nil), "envoy.config.filter.http.health_check.v2.HealthCheck.ClusterMinHealthyPercentagesEntry")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/health_check/v2/health_check.proto", fileDescriptor_75439d7b4d98e201)
}

var fileDescriptor_75439d7b4d98e201 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x3f, 0x6f, 0xd4, 0x30,
	0x14, 0x57, 0xee, 0x7a, 0xa5, 0xf5, 0x0d, 0x1c, 0x61, 0x20, 0x9c, 0xa0, 0xb4, 0x4c, 0xd7, 0x01,
	0x5b, 0xba, 0x4a, 0xa8, 0xa2, 0xdb, 0x15, 0x24, 0x84, 0x74, 0xd2, 0x29, 0xaa, 0x60, 0x8c, 0xdc,
	0xe4, 0x5d, 0x62, 0x35, 0xb1, 0x2d, 0xe7, 0xe5, 0x68, 0x36, 0x56, 0x58, 0x58, 0x99, 0xf8, 0x20,
	0x7c, 0x02, 0x56, 0x3e, 0x03, 0xdf, 0x80, 0x91, 0x01, 0x21, 0xdb, 0x39, 0xd1, 0xaa, 0x40, 0xbb,
	0x44, 0x76, 0xde, 0xef, 0xcf, 0xf3, 0xef, 0x3d, 0x72, 0x04, 0x72, 0xa5, 0x5a, 0x96, 0x2a, 0xb9,
	0x14, 0x39, 0x5b, 0x8a, 0x12, 0xc1, 0xb0, 0x02, 0x51, 0xb3, 0x02, 0x78, 0x89, 0x45, 0x92, 0x16,
	0x90, 0x9e, 0xb1, 0xd5, 0xf4, 0xd2, 0x9d, 0x6a, 0xa3, 0x50, 0x85, 0x13, 0x47, 0xa6, 0x9e, 0x4c,
	0x3d, 0x99, 0x5a, 0x32, 0xbd, 0x04, 0x5e, 0x4d, 0xc7, 0xfb, 0xde, 0x86, 0x6b, 0x61, 0xa5, 0x8c,
	0x6a, 0x10, 0xfc, 0x37, 0x49, 0x55, 0xa5, 0x95, 0x04, 0x89, 0xb5, 0x17, 0x1d, 0x47, 0x1e, 0x8a,
	0xad, 0x06, 0xa6, 0xc1, 0xa4, 0x20, 0xb1, 0xab, 0xec, 0xe4, 0x4a, 0xe5, 0x25, 0x30, 0x77, 0x3b,
	0x6d, 0x96, 0x2c, 0x6b, 0x0c, 0x47, 0xa1, 0xe4, 0xbf, 0xea, 0x6f, 0x0d, 0xd7, 0x1a, 0xcc, 0x5a,
	0x79, 0xa7, 0xc9, 0x34, 0x67, 0x5c, 0x4a, 0x85, 0x8e, 0x56, 0xb3, 0x4a, 0xe4, 0x86, 0x23, 0x74,
	0xf5, 0x87, 0x57, 0xea, 0x35, 0x72, 0x6c, 0xd6, 0xf4, 0x7b, 0x2b, 0x5e, 0x8a, 0x8c, 0x23, 0xb0,
	0xf5, 0xc1, 0x17, 0x1e, 0x7f, 0xef, 0x93, 0xe1, 0x4b, 0xf7, 0xe0, 0x63, 0xfb, 0xde, 0x70, 0x41,
	0xee, 0x68, 0x5e, 0xd7, 0x09, 0x16, 0x46, 0x35, 0x79, 0x91, 0x54, 0x2a, 0x83, 0x28, 0xd8, 0x0d,
	0x26, 0xc3, 0xe9, 0x98, 0xfa, 0x1e, 0xe9, 0xba, 0x47, 0x3a, 0x53, 0xaa, 0x7c, 0xcd, 0xcb, 0x06,
	0x66, 0x5b, 0x3f, 0x67, 0x83, 0x0f, 0x41, 0x6f, 0x14, 0xc4, 0xb7, 0x2d, 0xfd, 0xc4, 0xb3, 0xe7,
	0x2a, 0x83, 0xf0, 0x90, 0x90, 0x94, 0xa7, 0x05, 0x24, 0x28, 0x2a, 0x88, 0xfa, 0x4e, 0xea, 0xfe,
	0x15, 0xa9, 0xe7, 0x5d, 0x1c, 0xf1, 0xb6, 0x03, 0x9f, 0x88, 0x0a, 0xc2, 0xcf, 0x01, 0x79, 0x94,
	0x96, 0x4d, 0x8d, 0x60, 0x92, 0x4a, 0xc8, 0xc4, 0x0f, 0xa6, 0x4d, 0xba, 0x64, 0x79, 0x0e, 0x75,
	0xb4, 0xb1, 0xdb, 0x9f, 0x0c, 0xa7, 0x6f, 0xe8, 0x4d, 0xa7, 0x49, 0x2f, 0x3c, 0x96, 0x1e, 0x7b,
	0xf1, 0xb9, 0x90, 0xfe, 0x6f, 0xbb, 0xf8, 0xa3, 0xfc, 0x42, 0xa2, 0x69, 0xe3, 0x07, 0xe9, 0x7f,
	0x20, 0xe1, 0x11, 0xb9, 0x55, 0x00, 0xcf, 0xc0, 0xd4, 0xd1, 0xc0, 0xf5, 0xb1, 0xd7, 0xf5, 0xc1,
	0xb5, 0xb0, 0x5e, 0x6e, 0x4b, 0xac, 0x63, 0x06, 0x66, 0xce, 0x31, 0x2d, 0xc0, 0xc4, 0x6b, 0xc6,
	0x38, 0x23, 0x7b, 0xd7, 0xfa, 0x87, 0x23, 0xd2, 0x3f, 0x83, 0xd6, 0x0d, 0x60, 0x3b, 0xb6, 0xc7,
	0x70, 0x9f, 0x0c, 0x56, 0x36, 0xf2, 0xa8, 0xe7, 0x92, 0xbc, 0xdb, 0x39, 0xda, 0x95, 0xa3, 0x1d,
	0x3d, 0xf6, 0x88, 0x67, 0xbd, 0xc3, 0xe0, 0xd5, 0xc6, 0x56, 0x6f, 0xd4, 0x9f, 0xbd, 0x0f, 0x7e,
	0x7c, 0xfa, 0xf5, 0x71, 0xc0, 0xc2, 0x27, 0x1e, 0x0d, 0xe7, 0x08, 0xb2, 0xb6, 0x6b, 0xd2, 0x65,
	0x55, 0xff, 0x2d, 0xac, 0x83, 0x2f, 0xef, 0xbe, 0x7e, 0xdb, 0xec, 0x8d, 0x02, 0xf2, 0x54, 0x28,
	0xef, 0xa3, 0x8d, 0x3a, 0x6f, 0x6f, 0x1c, 0xf6, 0x6c, 0x74, 0x21, 0xed, 0x85, 0x1d, 0xf5, 0x22,
	0x38, 0xdd, 0x74, 0x33, 0x3f, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xe4, 0x6a, 0x12, 0xbe,
	0x03, 0x00, 0x00,
}
