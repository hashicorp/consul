// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockpbresource

import (
	"context"

	"github.com/hashicorp/consul/proto-public/pbresource"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// newIsWatchEvent_Event creates a new instance of isWatchEvent_Event. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newIsWatchEvent_Event(t interface {
	mock.TestingT
	Cleanup(func())
}) *isWatchEvent_Event {
	mock := &isWatchEvent_Event{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// isWatchEvent_Event is an autogenerated mock type for the isWatchEvent_Event type
type isWatchEvent_Event struct {
	mock.Mock
}

type isWatchEvent_Event_Expecter struct {
	mock *mock.Mock
}

func (_m *isWatchEvent_Event) EXPECT() *isWatchEvent_Event_Expecter {
	return &isWatchEvent_Event_Expecter{mock: &_m.Mock}
}

// isWatchEvent_Event provides a mock function for the type isWatchEvent_Event
func (_mock *isWatchEvent_Event) isWatchEvent_Event() {
	_mock.Called()
	return
}

// isWatchEvent_Event_isWatchEvent_Event_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isWatchEvent_Event'
type isWatchEvent_Event_isWatchEvent_Event_Call struct {
	*mock.Call
}

// isWatchEvent_Event is a helper method to define mock.On call
func (_e *isWatchEvent_Event_Expecter) isWatchEvent_Event() *isWatchEvent_Event_isWatchEvent_Event_Call {
	return &isWatchEvent_Event_isWatchEvent_Event_Call{Call: _e.mock.On("isWatchEvent_Event")}
}

func (_c *isWatchEvent_Event_isWatchEvent_Event_Call) Run(run func()) *isWatchEvent_Event_isWatchEvent_Event_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *isWatchEvent_Event_isWatchEvent_Event_Call) Return() *isWatchEvent_Event_isWatchEvent_Event_Call {
	_c.Call.Return()
	return _c
}

func (_c *isWatchEvent_Event_isWatchEvent_Event_Call) RunAndReturn(run func()) *isWatchEvent_Event_isWatchEvent_Event_Call {
	_c.Run(run)
	return _c
}

// NewResourceServiceClient creates a new instance of ResourceServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceServiceClient {
	mock := &ResourceServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ResourceServiceClient is an autogenerated mock type for the ResourceServiceClient type
type ResourceServiceClient struct {
	mock.Mock
}

type ResourceServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceServiceClient) EXPECT() *ResourceServiceClient_Expecter {
	return &ResourceServiceClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type ResourceServiceClient
func (_mock *ResourceServiceClient) Delete(ctx context.Context, in *pbresource.DeleteRequest, opts ...grpc.CallOption) (*pbresource.DeleteResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *pbresource.DeleteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.DeleteRequest, ...grpc.CallOption) (*pbresource.DeleteResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.DeleteRequest, ...grpc.CallOption) *pbresource.DeleteResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.DeleteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.DeleteRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ResourceServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbresource.DeleteRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_Delete_Call {
	return &ResourceServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_Delete_Call) Run(run func(ctx context.Context, in *pbresource.DeleteRequest, opts ...grpc.CallOption)) *ResourceServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.DeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.DeleteRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ResourceServiceClient_Delete_Call) Return(deleteResponse *pbresource.DeleteResponse, err error) *ResourceServiceClient_Delete_Call {
	_c.Call.Return(deleteResponse, err)
	return _c
}

func (_c *ResourceServiceClient_Delete_Call) RunAndReturn(run func(ctx context.Context, in *pbresource.DeleteRequest, opts ...grpc.CallOption) (*pbresource.DeleteResponse, error)) *ResourceServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type ResourceServiceClient
func (_mock *ResourceServiceClient) List(ctx context.Context, in *pbresource.ListRequest, opts ...grpc.CallOption) (*pbresource.ListResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *pbresource.ListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ListRequest, ...grpc.CallOption) (*pbresource.ListResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ListRequest, ...grpc.CallOption) *pbresource.ListResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.ListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.ListRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ResourceServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbresource.ListRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_List_Call {
	return &ResourceServiceClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_List_Call) Run(run func(ctx context.Context, in *pbresource.ListRequest, opts ...grpc.CallOption)) *ResourceServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.ListRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.ListRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ResourceServiceClient_List_Call) Return(listResponse *pbresource.ListResponse, err error) *ResourceServiceClient_List_Call {
	_c.Call.Return(listResponse, err)
	return _c
}

func (_c *ResourceServiceClient_List_Call) RunAndReturn(run func(ctx context.Context, in *pbresource.ListRequest, opts ...grpc.CallOption) (*pbresource.ListResponse, error)) *ResourceServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByOwner provides a mock function for the type ResourceServiceClient
func (_mock *ResourceServiceClient) ListByOwner(ctx context.Context, in *pbresource.ListByOwnerRequest, opts ...grpc.CallOption) (*pbresource.ListByOwnerResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListByOwner")
	}

	var r0 *pbresource.ListByOwnerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ListByOwnerRequest, ...grpc.CallOption) (*pbresource.ListByOwnerResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ListByOwnerRequest, ...grpc.CallOption) *pbresource.ListByOwnerResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.ListByOwnerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.ListByOwnerRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceClient_ListByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByOwner'
type ResourceServiceClient_ListByOwner_Call struct {
	*mock.Call
}

// ListByOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbresource.ListByOwnerRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) ListByOwner(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_ListByOwner_Call {
	return &ResourceServiceClient_ListByOwner_Call{Call: _e.mock.On("ListByOwner",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_ListByOwner_Call) Run(run func(ctx context.Context, in *pbresource.ListByOwnerRequest, opts ...grpc.CallOption)) *ResourceServiceClient_ListByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.ListByOwnerRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.ListByOwnerRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ResourceServiceClient_ListByOwner_Call) Return(listByOwnerResponse *pbresource.ListByOwnerResponse, err error) *ResourceServiceClient_ListByOwner_Call {
	_c.Call.Return(listByOwnerResponse, err)
	return _c
}

func (_c *ResourceServiceClient_ListByOwner_Call) RunAndReturn(run func(ctx context.Context, in *pbresource.ListByOwnerRequest, opts ...grpc.CallOption) (*pbresource.ListByOwnerResponse, error)) *ResourceServiceClient_ListByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// MutateAndValidate provides a mock function for the type ResourceServiceClient
func (_mock *ResourceServiceClient) MutateAndValidate(ctx context.Context, in *pbresource.MutateAndValidateRequest, opts ...grpc.CallOption) (*pbresource.MutateAndValidateResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MutateAndValidate")
	}

	var r0 *pbresource.MutateAndValidateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.MutateAndValidateRequest, ...grpc.CallOption) (*pbresource.MutateAndValidateResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.MutateAndValidateRequest, ...grpc.CallOption) *pbresource.MutateAndValidateResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.MutateAndValidateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.MutateAndValidateRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceClient_MutateAndValidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutateAndValidate'
type ResourceServiceClient_MutateAndValidate_Call struct {
	*mock.Call
}

// MutateAndValidate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbresource.MutateAndValidateRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) MutateAndValidate(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_MutateAndValidate_Call {
	return &ResourceServiceClient_MutateAndValidate_Call{Call: _e.mock.On("MutateAndValidate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_MutateAndValidate_Call) Run(run func(ctx context.Context, in *pbresource.MutateAndValidateRequest, opts ...grpc.CallOption)) *ResourceServiceClient_MutateAndValidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.MutateAndValidateRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.MutateAndValidateRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ResourceServiceClient_MutateAndValidate_Call) Return(mutateAndValidateResponse *pbresource.MutateAndValidateResponse, err error) *ResourceServiceClient_MutateAndValidate_Call {
	_c.Call.Return(mutateAndValidateResponse, err)
	return _c
}

func (_c *ResourceServiceClient_MutateAndValidate_Call) RunAndReturn(run func(ctx context.Context, in *pbresource.MutateAndValidateRequest, opts ...grpc.CallOption) (*pbresource.MutateAndValidateResponse, error)) *ResourceServiceClient_MutateAndValidate_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type ResourceServiceClient
func (_mock *ResourceServiceClient) Read(ctx context.Context, in *pbresource.ReadRequest, opts ...grpc.CallOption) (*pbresource.ReadResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *pbresource.ReadResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ReadRequest, ...grpc.CallOption) (*pbresource.ReadResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ReadRequest, ...grpc.CallOption) *pbresource.ReadResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.ReadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.ReadRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ResourceServiceClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbresource.ReadRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) Read(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_Read_Call {
	return &ResourceServiceClient_Read_Call{Call: _e.mock.On("Read",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_Read_Call) Run(run func(ctx context.Context, in *pbresource.ReadRequest, opts ...grpc.CallOption)) *ResourceServiceClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.ReadRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.ReadRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ResourceServiceClient_Read_Call) Return(readResponse *pbresource.ReadResponse, err error) *ResourceServiceClient_Read_Call {
	_c.Call.Return(readResponse, err)
	return _c
}

func (_c *ResourceServiceClient_Read_Call) RunAndReturn(run func(ctx context.Context, in *pbresource.ReadRequest, opts ...grpc.CallOption) (*pbresource.ReadResponse, error)) *ResourceServiceClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// WatchList provides a mock function for the type ResourceServiceClient
func (_mock *ResourceServiceClient) WatchList(ctx context.Context, in *pbresource.WatchListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pbresource.WatchEvent], error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchList")
	}

	var r0 grpc.ServerStreamingClient[pbresource.WatchEvent]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WatchListRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[pbresource.WatchEvent], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WatchListRequest, ...grpc.CallOption) grpc.ServerStreamingClient[pbresource.WatchEvent]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[pbresource.WatchEvent])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.WatchListRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceClient_WatchList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchList'
type ResourceServiceClient_WatchList_Call struct {
	*mock.Call
}

// WatchList is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbresource.WatchListRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) WatchList(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_WatchList_Call {
	return &ResourceServiceClient_WatchList_Call{Call: _e.mock.On("WatchList",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_WatchList_Call) Run(run func(ctx context.Context, in *pbresource.WatchListRequest, opts ...grpc.CallOption)) *ResourceServiceClient_WatchList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.WatchListRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.WatchListRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ResourceServiceClient_WatchList_Call) Return(serverStreamingClient grpc.ServerStreamingClient[pbresource.WatchEvent], err error) *ResourceServiceClient_WatchList_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *ResourceServiceClient_WatchList_Call) RunAndReturn(run func(ctx context.Context, in *pbresource.WatchListRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pbresource.WatchEvent], error)) *ResourceServiceClient_WatchList_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type ResourceServiceClient
func (_mock *ResourceServiceClient) Write(ctx context.Context, in *pbresource.WriteRequest, opts ...grpc.CallOption) (*pbresource.WriteResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 *pbresource.WriteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WriteRequest, ...grpc.CallOption) (*pbresource.WriteResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WriteRequest, ...grpc.CallOption) *pbresource.WriteResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.WriteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.WriteRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceClient_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ResourceServiceClient_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbresource.WriteRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) Write(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_Write_Call {
	return &ResourceServiceClient_Write_Call{Call: _e.mock.On("Write",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_Write_Call) Run(run func(ctx context.Context, in *pbresource.WriteRequest, opts ...grpc.CallOption)) *ResourceServiceClient_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.WriteRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.WriteRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ResourceServiceClient_Write_Call) Return(writeResponse *pbresource.WriteResponse, err error) *ResourceServiceClient_Write_Call {
	_c.Call.Return(writeResponse, err)
	return _c
}

func (_c *ResourceServiceClient_Write_Call) RunAndReturn(run func(ctx context.Context, in *pbresource.WriteRequest, opts ...grpc.CallOption) (*pbresource.WriteResponse, error)) *ResourceServiceClient_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteStatus provides a mock function for the type ResourceServiceClient
func (_mock *ResourceServiceClient) WriteStatus(ctx context.Context, in *pbresource.WriteStatusRequest, opts ...grpc.CallOption) (*pbresource.WriteStatusResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteStatus")
	}

	var r0 *pbresource.WriteStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WriteStatusRequest, ...grpc.CallOption) (*pbresource.WriteStatusResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WriteStatusRequest, ...grpc.CallOption) *pbresource.WriteStatusResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.WriteStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.WriteStatusRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceClient_WriteStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteStatus'
type ResourceServiceClient_WriteStatus_Call struct {
	*mock.Call
}

// WriteStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbresource.WriteStatusRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) WriteStatus(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_WriteStatus_Call {
	return &ResourceServiceClient_WriteStatus_Call{Call: _e.mock.On("WriteStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_WriteStatus_Call) Run(run func(ctx context.Context, in *pbresource.WriteStatusRequest, opts ...grpc.CallOption)) *ResourceServiceClient_WriteStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.WriteStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.WriteStatusRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ResourceServiceClient_WriteStatus_Call) Return(writeStatusResponse *pbresource.WriteStatusResponse, err error) *ResourceServiceClient_WriteStatus_Call {
	_c.Call.Return(writeStatusResponse, err)
	return _c
}

func (_c *ResourceServiceClient_WriteStatus_Call) RunAndReturn(run func(ctx context.Context, in *pbresource.WriteStatusRequest, opts ...grpc.CallOption) (*pbresource.WriteStatusResponse, error)) *ResourceServiceClient_WriteStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceService_WatchListClient creates a new instance of ResourceService_WatchListClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceService_WatchListClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceService_WatchListClient {
	mock := &ResourceService_WatchListClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ResourceService_WatchListClient is an autogenerated mock type for the ResourceService_WatchListClient type
type ResourceService_WatchListClient struct {
	mock.Mock
}

type ResourceService_WatchListClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceService_WatchListClient) EXPECT() *ResourceService_WatchListClient_Expecter {
	return &ResourceService_WatchListClient_Expecter{mock: &_m.Mock}
}

// CloseSend provides a mock function for the type ResourceService_WatchListClient
func (_mock *ResourceService_WatchListClient) CloseSend() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseSend")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceService_WatchListClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type ResourceService_WatchListClient_CloseSend_Call struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *ResourceService_WatchListClient_Expecter) CloseSend() *ResourceService_WatchListClient_CloseSend_Call {
	return &ResourceService_WatchListClient_CloseSend_Call{Call: _e.mock.On("CloseSend")}
}

func (_c *ResourceService_WatchListClient_CloseSend_Call) Run(run func()) *ResourceService_WatchListClient_CloseSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceService_WatchListClient_CloseSend_Call) Return(err error) *ResourceService_WatchListClient_CloseSend_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceService_WatchListClient_CloseSend_Call) RunAndReturn(run func() error) *ResourceService_WatchListClient_CloseSend_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function for the type ResourceService_WatchListClient
func (_mock *ResourceService_WatchListClient) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// ResourceService_WatchListClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type ResourceService_WatchListClient_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *ResourceService_WatchListClient_Expecter) Context() *ResourceService_WatchListClient_Context_Call {
	return &ResourceService_WatchListClient_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *ResourceService_WatchListClient_Context_Call) Run(run func()) *ResourceService_WatchListClient_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceService_WatchListClient_Context_Call) Return(context1 context.Context) *ResourceService_WatchListClient_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *ResourceService_WatchListClient_Context_Call) RunAndReturn(run func() context.Context) *ResourceService_WatchListClient_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function for the type ResourceService_WatchListClient
func (_mock *ResourceService_WatchListClient) Header() (metadata.MD, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 metadata.MD
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (metadata.MD, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceService_WatchListClient_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type ResourceService_WatchListClient_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *ResourceService_WatchListClient_Expecter) Header() *ResourceService_WatchListClient_Header_Call {
	return &ResourceService_WatchListClient_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *ResourceService_WatchListClient_Header_Call) Run(run func()) *ResourceService_WatchListClient_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceService_WatchListClient_Header_Call) Return(mD metadata.MD, err error) *ResourceService_WatchListClient_Header_Call {
	_c.Call.Return(mD, err)
	return _c
}

func (_c *ResourceService_WatchListClient_Header_Call) RunAndReturn(run func() (metadata.MD, error)) *ResourceService_WatchListClient_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type ResourceService_WatchListClient
func (_mock *ResourceService_WatchListClient) Recv() (*pbresource.WatchEvent, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 *pbresource.WatchEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*pbresource.WatchEvent, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *pbresource.WatchEvent); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.WatchEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceService_WatchListClient_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type ResourceService_WatchListClient_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *ResourceService_WatchListClient_Expecter) Recv() *ResourceService_WatchListClient_Recv_Call {
	return &ResourceService_WatchListClient_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *ResourceService_WatchListClient_Recv_Call) Run(run func()) *ResourceService_WatchListClient_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceService_WatchListClient_Recv_Call) Return(watchEvent *pbresource.WatchEvent, err error) *ResourceService_WatchListClient_Recv_Call {
	_c.Call.Return(watchEvent, err)
	return _c
}

func (_c *ResourceService_WatchListClient_Recv_Call) RunAndReturn(run func() (*pbresource.WatchEvent, error)) *ResourceService_WatchListClient_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type ResourceService_WatchListClient
func (_mock *ResourceService_WatchListClient) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceService_WatchListClient_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type ResourceService_WatchListClient_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *ResourceService_WatchListClient_Expecter) RecvMsg(m interface{}) *ResourceService_WatchListClient_RecvMsg_Call {
	return &ResourceService_WatchListClient_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *ResourceService_WatchListClient_RecvMsg_Call) Run(run func(m any)) *ResourceService_WatchListClient_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResourceService_WatchListClient_RecvMsg_Call) Return(err error) *ResourceService_WatchListClient_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceService_WatchListClient_RecvMsg_Call) RunAndReturn(run func(m any) error) *ResourceService_WatchListClient_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type ResourceService_WatchListClient
func (_mock *ResourceService_WatchListClient) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceService_WatchListClient_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type ResourceService_WatchListClient_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *ResourceService_WatchListClient_Expecter) SendMsg(m interface{}) *ResourceService_WatchListClient_SendMsg_Call {
	return &ResourceService_WatchListClient_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *ResourceService_WatchListClient_SendMsg_Call) Run(run func(m any)) *ResourceService_WatchListClient_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResourceService_WatchListClient_SendMsg_Call) Return(err error) *ResourceService_WatchListClient_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceService_WatchListClient_SendMsg_Call) RunAndReturn(run func(m any) error) *ResourceService_WatchListClient_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Trailer provides a mock function for the type ResourceService_WatchListClient
func (_mock *ResourceService_WatchListClient) Trailer() metadata.MD {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trailer")
	}

	var r0 metadata.MD
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	return r0
}

// ResourceService_WatchListClient_Trailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trailer'
type ResourceService_WatchListClient_Trailer_Call struct {
	*mock.Call
}

// Trailer is a helper method to define mock.On call
func (_e *ResourceService_WatchListClient_Expecter) Trailer() *ResourceService_WatchListClient_Trailer_Call {
	return &ResourceService_WatchListClient_Trailer_Call{Call: _e.mock.On("Trailer")}
}

func (_c *ResourceService_WatchListClient_Trailer_Call) Run(run func()) *ResourceService_WatchListClient_Trailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceService_WatchListClient_Trailer_Call) Return(mD metadata.MD) *ResourceService_WatchListClient_Trailer_Call {
	_c.Call.Return(mD)
	return _c
}

func (_c *ResourceService_WatchListClient_Trailer_Call) RunAndReturn(run func() metadata.MD) *ResourceService_WatchListClient_Trailer_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceServiceServer creates a new instance of ResourceServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceServiceServer {
	mock := &ResourceServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ResourceServiceServer is an autogenerated mock type for the ResourceServiceServer type
type ResourceServiceServer struct {
	mock.Mock
}

type ResourceServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceServiceServer) EXPECT() *ResourceServiceServer_Expecter {
	return &ResourceServiceServer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type ResourceServiceServer
func (_mock *ResourceServiceServer) Delete(context1 context.Context, deleteRequest *pbresource.DeleteRequest) (*pbresource.DeleteResponse, error) {
	ret := _mock.Called(context1, deleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *pbresource.DeleteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.DeleteRequest) (*pbresource.DeleteResponse, error)); ok {
		return returnFunc(context1, deleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.DeleteRequest) *pbresource.DeleteResponse); ok {
		r0 = returnFunc(context1, deleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.DeleteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.DeleteRequest) error); ok {
		r1 = returnFunc(context1, deleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ResourceServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - deleteRequest *pbresource.DeleteRequest
func (_e *ResourceServiceServer_Expecter) Delete(context1 interface{}, deleteRequest interface{}) *ResourceServiceServer_Delete_Call {
	return &ResourceServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, deleteRequest)}
}

func (_c *ResourceServiceServer_Delete_Call) Run(run func(context1 context.Context, deleteRequest *pbresource.DeleteRequest)) *ResourceServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.DeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.DeleteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResourceServiceServer_Delete_Call) Return(deleteResponse *pbresource.DeleteResponse, err error) *ResourceServiceServer_Delete_Call {
	_c.Call.Return(deleteResponse, err)
	return _c
}

func (_c *ResourceServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, deleteRequest *pbresource.DeleteRequest) (*pbresource.DeleteResponse, error)) *ResourceServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type ResourceServiceServer
func (_mock *ResourceServiceServer) List(context1 context.Context, listRequest *pbresource.ListRequest) (*pbresource.ListResponse, error) {
	ret := _mock.Called(context1, listRequest)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *pbresource.ListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ListRequest) (*pbresource.ListResponse, error)); ok {
		return returnFunc(context1, listRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ListRequest) *pbresource.ListResponse); ok {
		r0 = returnFunc(context1, listRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.ListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.ListRequest) error); ok {
		r1 = returnFunc(context1, listRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ResourceServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - context1 context.Context
//   - listRequest *pbresource.ListRequest
func (_e *ResourceServiceServer_Expecter) List(context1 interface{}, listRequest interface{}) *ResourceServiceServer_List_Call {
	return &ResourceServiceServer_List_Call{Call: _e.mock.On("List", context1, listRequest)}
}

func (_c *ResourceServiceServer_List_Call) Run(run func(context1 context.Context, listRequest *pbresource.ListRequest)) *ResourceServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.ListRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.ListRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResourceServiceServer_List_Call) Return(listResponse *pbresource.ListResponse, err error) *ResourceServiceServer_List_Call {
	_c.Call.Return(listResponse, err)
	return _c
}

func (_c *ResourceServiceServer_List_Call) RunAndReturn(run func(context1 context.Context, listRequest *pbresource.ListRequest) (*pbresource.ListResponse, error)) *ResourceServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByOwner provides a mock function for the type ResourceServiceServer
func (_mock *ResourceServiceServer) ListByOwner(context1 context.Context, listByOwnerRequest *pbresource.ListByOwnerRequest) (*pbresource.ListByOwnerResponse, error) {
	ret := _mock.Called(context1, listByOwnerRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListByOwner")
	}

	var r0 *pbresource.ListByOwnerResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ListByOwnerRequest) (*pbresource.ListByOwnerResponse, error)); ok {
		return returnFunc(context1, listByOwnerRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ListByOwnerRequest) *pbresource.ListByOwnerResponse); ok {
		r0 = returnFunc(context1, listByOwnerRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.ListByOwnerResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.ListByOwnerRequest) error); ok {
		r1 = returnFunc(context1, listByOwnerRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceServer_ListByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByOwner'
type ResourceServiceServer_ListByOwner_Call struct {
	*mock.Call
}

// ListByOwner is a helper method to define mock.On call
//   - context1 context.Context
//   - listByOwnerRequest *pbresource.ListByOwnerRequest
func (_e *ResourceServiceServer_Expecter) ListByOwner(context1 interface{}, listByOwnerRequest interface{}) *ResourceServiceServer_ListByOwner_Call {
	return &ResourceServiceServer_ListByOwner_Call{Call: _e.mock.On("ListByOwner", context1, listByOwnerRequest)}
}

func (_c *ResourceServiceServer_ListByOwner_Call) Run(run func(context1 context.Context, listByOwnerRequest *pbresource.ListByOwnerRequest)) *ResourceServiceServer_ListByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.ListByOwnerRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.ListByOwnerRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResourceServiceServer_ListByOwner_Call) Return(listByOwnerResponse *pbresource.ListByOwnerResponse, err error) *ResourceServiceServer_ListByOwner_Call {
	_c.Call.Return(listByOwnerResponse, err)
	return _c
}

func (_c *ResourceServiceServer_ListByOwner_Call) RunAndReturn(run func(context1 context.Context, listByOwnerRequest *pbresource.ListByOwnerRequest) (*pbresource.ListByOwnerResponse, error)) *ResourceServiceServer_ListByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// MutateAndValidate provides a mock function for the type ResourceServiceServer
func (_mock *ResourceServiceServer) MutateAndValidate(context1 context.Context, mutateAndValidateRequest *pbresource.MutateAndValidateRequest) (*pbresource.MutateAndValidateResponse, error) {
	ret := _mock.Called(context1, mutateAndValidateRequest)

	if len(ret) == 0 {
		panic("no return value specified for MutateAndValidate")
	}

	var r0 *pbresource.MutateAndValidateResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.MutateAndValidateRequest) (*pbresource.MutateAndValidateResponse, error)); ok {
		return returnFunc(context1, mutateAndValidateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.MutateAndValidateRequest) *pbresource.MutateAndValidateResponse); ok {
		r0 = returnFunc(context1, mutateAndValidateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.MutateAndValidateResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.MutateAndValidateRequest) error); ok {
		r1 = returnFunc(context1, mutateAndValidateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceServer_MutateAndValidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutateAndValidate'
type ResourceServiceServer_MutateAndValidate_Call struct {
	*mock.Call
}

// MutateAndValidate is a helper method to define mock.On call
//   - context1 context.Context
//   - mutateAndValidateRequest *pbresource.MutateAndValidateRequest
func (_e *ResourceServiceServer_Expecter) MutateAndValidate(context1 interface{}, mutateAndValidateRequest interface{}) *ResourceServiceServer_MutateAndValidate_Call {
	return &ResourceServiceServer_MutateAndValidate_Call{Call: _e.mock.On("MutateAndValidate", context1, mutateAndValidateRequest)}
}

func (_c *ResourceServiceServer_MutateAndValidate_Call) Run(run func(context1 context.Context, mutateAndValidateRequest *pbresource.MutateAndValidateRequest)) *ResourceServiceServer_MutateAndValidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.MutateAndValidateRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.MutateAndValidateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResourceServiceServer_MutateAndValidate_Call) Return(mutateAndValidateResponse *pbresource.MutateAndValidateResponse, err error) *ResourceServiceServer_MutateAndValidate_Call {
	_c.Call.Return(mutateAndValidateResponse, err)
	return _c
}

func (_c *ResourceServiceServer_MutateAndValidate_Call) RunAndReturn(run func(context1 context.Context, mutateAndValidateRequest *pbresource.MutateAndValidateRequest) (*pbresource.MutateAndValidateResponse, error)) *ResourceServiceServer_MutateAndValidate_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type ResourceServiceServer
func (_mock *ResourceServiceServer) Read(context1 context.Context, readRequest *pbresource.ReadRequest) (*pbresource.ReadResponse, error) {
	ret := _mock.Called(context1, readRequest)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *pbresource.ReadResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ReadRequest) (*pbresource.ReadResponse, error)); ok {
		return returnFunc(context1, readRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.ReadRequest) *pbresource.ReadResponse); ok {
		r0 = returnFunc(context1, readRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.ReadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.ReadRequest) error); ok {
		r1 = returnFunc(context1, readRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceServer_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ResourceServiceServer_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - context1 context.Context
//   - readRequest *pbresource.ReadRequest
func (_e *ResourceServiceServer_Expecter) Read(context1 interface{}, readRequest interface{}) *ResourceServiceServer_Read_Call {
	return &ResourceServiceServer_Read_Call{Call: _e.mock.On("Read", context1, readRequest)}
}

func (_c *ResourceServiceServer_Read_Call) Run(run func(context1 context.Context, readRequest *pbresource.ReadRequest)) *ResourceServiceServer_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.ReadRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.ReadRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResourceServiceServer_Read_Call) Return(readResponse *pbresource.ReadResponse, err error) *ResourceServiceServer_Read_Call {
	_c.Call.Return(readResponse, err)
	return _c
}

func (_c *ResourceServiceServer_Read_Call) RunAndReturn(run func(context1 context.Context, readRequest *pbresource.ReadRequest) (*pbresource.ReadResponse, error)) *ResourceServiceServer_Read_Call {
	_c.Call.Return(run)
	return _c
}

// WatchList provides a mock function for the type ResourceServiceServer
func (_mock *ResourceServiceServer) WatchList(watchListRequest *pbresource.WatchListRequest, serverStreamingServer grpc.ServerStreamingServer[pbresource.WatchEvent]) error {
	ret := _mock.Called(watchListRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for WatchList")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*pbresource.WatchListRequest, grpc.ServerStreamingServer[pbresource.WatchEvent]) error); ok {
		r0 = returnFunc(watchListRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceServiceServer_WatchList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchList'
type ResourceServiceServer_WatchList_Call struct {
	*mock.Call
}

// WatchList is a helper method to define mock.On call
//   - watchListRequest *pbresource.WatchListRequest
//   - serverStreamingServer grpc.ServerStreamingServer[pbresource.WatchEvent]
func (_e *ResourceServiceServer_Expecter) WatchList(watchListRequest interface{}, serverStreamingServer interface{}) *ResourceServiceServer_WatchList_Call {
	return &ResourceServiceServer_WatchList_Call{Call: _e.mock.On("WatchList", watchListRequest, serverStreamingServer)}
}

func (_c *ResourceServiceServer_WatchList_Call) Run(run func(watchListRequest *pbresource.WatchListRequest, serverStreamingServer grpc.ServerStreamingServer[pbresource.WatchEvent])) *ResourceServiceServer_WatchList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pbresource.WatchListRequest
		if args[0] != nil {
			arg0 = args[0].(*pbresource.WatchListRequest)
		}
		var arg1 grpc.ServerStreamingServer[pbresource.WatchEvent]
		if args[1] != nil {
			arg1 = args[1].(grpc.ServerStreamingServer[pbresource.WatchEvent])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResourceServiceServer_WatchList_Call) Return(err error) *ResourceServiceServer_WatchList_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceServiceServer_WatchList_Call) RunAndReturn(run func(watchListRequest *pbresource.WatchListRequest, serverStreamingServer grpc.ServerStreamingServer[pbresource.WatchEvent]) error) *ResourceServiceServer_WatchList_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type ResourceServiceServer
func (_mock *ResourceServiceServer) Write(context1 context.Context, writeRequest *pbresource.WriteRequest) (*pbresource.WriteResponse, error) {
	ret := _mock.Called(context1, writeRequest)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 *pbresource.WriteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WriteRequest) (*pbresource.WriteResponse, error)); ok {
		return returnFunc(context1, writeRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WriteRequest) *pbresource.WriteResponse); ok {
		r0 = returnFunc(context1, writeRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.WriteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.WriteRequest) error); ok {
		r1 = returnFunc(context1, writeRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceServer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ResourceServiceServer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - context1 context.Context
//   - writeRequest *pbresource.WriteRequest
func (_e *ResourceServiceServer_Expecter) Write(context1 interface{}, writeRequest interface{}) *ResourceServiceServer_Write_Call {
	return &ResourceServiceServer_Write_Call{Call: _e.mock.On("Write", context1, writeRequest)}
}

func (_c *ResourceServiceServer_Write_Call) Run(run func(context1 context.Context, writeRequest *pbresource.WriteRequest)) *ResourceServiceServer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.WriteRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.WriteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResourceServiceServer_Write_Call) Return(writeResponse *pbresource.WriteResponse, err error) *ResourceServiceServer_Write_Call {
	_c.Call.Return(writeResponse, err)
	return _c
}

func (_c *ResourceServiceServer_Write_Call) RunAndReturn(run func(context1 context.Context, writeRequest *pbresource.WriteRequest) (*pbresource.WriteResponse, error)) *ResourceServiceServer_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteStatus provides a mock function for the type ResourceServiceServer
func (_mock *ResourceServiceServer) WriteStatus(context1 context.Context, writeStatusRequest *pbresource.WriteStatusRequest) (*pbresource.WriteStatusResponse, error) {
	ret := _mock.Called(context1, writeStatusRequest)

	if len(ret) == 0 {
		panic("no return value specified for WriteStatus")
	}

	var r0 *pbresource.WriteStatusResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WriteStatusRequest) (*pbresource.WriteStatusResponse, error)); ok {
		return returnFunc(context1, writeStatusRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbresource.WriteStatusRequest) *pbresource.WriteStatusResponse); ok {
		r0 = returnFunc(context1, writeStatusRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbresource.WriteStatusResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbresource.WriteStatusRequest) error); ok {
		r1 = returnFunc(context1, writeStatusRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ResourceServiceServer_WriteStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteStatus'
type ResourceServiceServer_WriteStatus_Call struct {
	*mock.Call
}

// WriteStatus is a helper method to define mock.On call
//   - context1 context.Context
//   - writeStatusRequest *pbresource.WriteStatusRequest
func (_e *ResourceServiceServer_Expecter) WriteStatus(context1 interface{}, writeStatusRequest interface{}) *ResourceServiceServer_WriteStatus_Call {
	return &ResourceServiceServer_WriteStatus_Call{Call: _e.mock.On("WriteStatus", context1, writeStatusRequest)}
}

func (_c *ResourceServiceServer_WriteStatus_Call) Run(run func(context1 context.Context, writeStatusRequest *pbresource.WriteStatusRequest)) *ResourceServiceServer_WriteStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbresource.WriteStatusRequest
		if args[1] != nil {
			arg1 = args[1].(*pbresource.WriteStatusRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ResourceServiceServer_WriteStatus_Call) Return(writeStatusResponse *pbresource.WriteStatusResponse, err error) *ResourceServiceServer_WriteStatus_Call {
	_c.Call.Return(writeStatusResponse, err)
	return _c
}

func (_c *ResourceServiceServer_WriteStatus_Call) RunAndReturn(run func(context1 context.Context, writeStatusRequest *pbresource.WriteStatusRequest) (*pbresource.WriteStatusResponse, error)) *ResourceServiceServer_WriteStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewUnsafeResourceServiceServer creates a new instance of UnsafeResourceServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnsafeResourceServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnsafeResourceServiceServer {
	mock := &UnsafeResourceServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UnsafeResourceServiceServer is an autogenerated mock type for the UnsafeResourceServiceServer type
type UnsafeResourceServiceServer struct {
	mock.Mock
}

type UnsafeResourceServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *UnsafeResourceServiceServer) EXPECT() *UnsafeResourceServiceServer_Expecter {
	return &UnsafeResourceServiceServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedResourceServiceServer provides a mock function for the type UnsafeResourceServiceServer
func (_mock *UnsafeResourceServiceServer) mustEmbedUnimplementedResourceServiceServer() {
	_mock.Called()
	return
}

// UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedResourceServiceServer'
type UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedResourceServiceServer is a helper method to define mock.On call
func (_e *UnsafeResourceServiceServer_Expecter) mustEmbedUnimplementedResourceServiceServer() *UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call {
	return &UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedResourceServiceServer")}
}

func (_c *UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call) Run(run func()) *UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call) Return() *UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call) RunAndReturn(run func()) *UnsafeResourceServiceServer_mustEmbedUnimplementedResourceServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewResourceService_WatchListServer creates a new instance of ResourceService_WatchListServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceService_WatchListServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceService_WatchListServer {
	mock := &ResourceService_WatchListServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ResourceService_WatchListServer is an autogenerated mock type for the ResourceService_WatchListServer type
type ResourceService_WatchListServer struct {
	mock.Mock
}

type ResourceService_WatchListServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceService_WatchListServer) EXPECT() *ResourceService_WatchListServer_Expecter {
	return &ResourceService_WatchListServer_Expecter{mock: &_m.Mock}
}

// Context provides a mock function for the type ResourceService_WatchListServer
func (_mock *ResourceService_WatchListServer) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// ResourceService_WatchListServer_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type ResourceService_WatchListServer_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *ResourceService_WatchListServer_Expecter) Context() *ResourceService_WatchListServer_Context_Call {
	return &ResourceService_WatchListServer_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *ResourceService_WatchListServer_Context_Call) Run(run func()) *ResourceService_WatchListServer_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ResourceService_WatchListServer_Context_Call) Return(context1 context.Context) *ResourceService_WatchListServer_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *ResourceService_WatchListServer_Context_Call) RunAndReturn(run func() context.Context) *ResourceService_WatchListServer_Context_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type ResourceService_WatchListServer
func (_mock *ResourceService_WatchListServer) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceService_WatchListServer_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type ResourceService_WatchListServer_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *ResourceService_WatchListServer_Expecter) RecvMsg(m interface{}) *ResourceService_WatchListServer_RecvMsg_Call {
	return &ResourceService_WatchListServer_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *ResourceService_WatchListServer_RecvMsg_Call) Run(run func(m any)) *ResourceService_WatchListServer_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResourceService_WatchListServer_RecvMsg_Call) Return(err error) *ResourceService_WatchListServer_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceService_WatchListServer_RecvMsg_Call) RunAndReturn(run func(m any) error) *ResourceService_WatchListServer_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type ResourceService_WatchListServer
func (_mock *ResourceService_WatchListServer) Send(watchEvent *pbresource.WatchEvent) error {
	ret := _mock.Called(watchEvent)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*pbresource.WatchEvent) error); ok {
		r0 = returnFunc(watchEvent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceService_WatchListServer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type ResourceService_WatchListServer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - watchEvent *pbresource.WatchEvent
func (_e *ResourceService_WatchListServer_Expecter) Send(watchEvent interface{}) *ResourceService_WatchListServer_Send_Call {
	return &ResourceService_WatchListServer_Send_Call{Call: _e.mock.On("Send", watchEvent)}
}

func (_c *ResourceService_WatchListServer_Send_Call) Run(run func(watchEvent *pbresource.WatchEvent)) *ResourceService_WatchListServer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pbresource.WatchEvent
		if args[0] != nil {
			arg0 = args[0].(*pbresource.WatchEvent)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResourceService_WatchListServer_Send_Call) Return(err error) *ResourceService_WatchListServer_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceService_WatchListServer_Send_Call) RunAndReturn(run func(watchEvent *pbresource.WatchEvent) error) *ResourceService_WatchListServer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendHeader provides a mock function for the type ResourceService_WatchListServer
func (_mock *ResourceService_WatchListServer) SendHeader(mD metadata.MD) error {
	ret := _mock.Called(mD)

	if len(ret) == 0 {
		panic("no return value specified for SendHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = returnFunc(mD)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceService_WatchListServer_SendHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeader'
type ResourceService_WatchListServer_SendHeader_Call struct {
	*mock.Call
}

// SendHeader is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ResourceService_WatchListServer_Expecter) SendHeader(mD interface{}) *ResourceService_WatchListServer_SendHeader_Call {
	return &ResourceService_WatchListServer_SendHeader_Call{Call: _e.mock.On("SendHeader", mD)}
}

func (_c *ResourceService_WatchListServer_SendHeader_Call) Run(run func(mD metadata.MD)) *ResourceService_WatchListServer_SendHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResourceService_WatchListServer_SendHeader_Call) Return(err error) *ResourceService_WatchListServer_SendHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceService_WatchListServer_SendHeader_Call) RunAndReturn(run func(mD metadata.MD) error) *ResourceService_WatchListServer_SendHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type ResourceService_WatchListServer
func (_mock *ResourceService_WatchListServer) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceService_WatchListServer_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type ResourceService_WatchListServer_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *ResourceService_WatchListServer_Expecter) SendMsg(m interface{}) *ResourceService_WatchListServer_SendMsg_Call {
	return &ResourceService_WatchListServer_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *ResourceService_WatchListServer_SendMsg_Call) Run(run func(m any)) *ResourceService_WatchListServer_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResourceService_WatchListServer_SendMsg_Call) Return(err error) *ResourceService_WatchListServer_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceService_WatchListServer_SendMsg_Call) RunAndReturn(run func(m any) error) *ResourceService_WatchListServer_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeader provides a mock function for the type ResourceService_WatchListServer
func (_mock *ResourceService_WatchListServer) SetHeader(mD metadata.MD) error {
	ret := _mock.Called(mD)

	if len(ret) == 0 {
		panic("no return value specified for SetHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = returnFunc(mD)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ResourceService_WatchListServer_SetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeader'
type ResourceService_WatchListServer_SetHeader_Call struct {
	*mock.Call
}

// SetHeader is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ResourceService_WatchListServer_Expecter) SetHeader(mD interface{}) *ResourceService_WatchListServer_SetHeader_Call {
	return &ResourceService_WatchListServer_SetHeader_Call{Call: _e.mock.On("SetHeader", mD)}
}

func (_c *ResourceService_WatchListServer_SetHeader_Call) Run(run func(mD metadata.MD)) *ResourceService_WatchListServer_SetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResourceService_WatchListServer_SetHeader_Call) Return(err error) *ResourceService_WatchListServer_SetHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ResourceService_WatchListServer_SetHeader_Call) RunAndReturn(run func(mD metadata.MD) error) *ResourceService_WatchListServer_SetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetTrailer provides a mock function for the type ResourceService_WatchListServer
func (_mock *ResourceService_WatchListServer) SetTrailer(mD metadata.MD) {
	_mock.Called(mD)
	return
}

// ResourceService_WatchListServer_SetTrailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTrailer'
type ResourceService_WatchListServer_SetTrailer_Call struct {
	*mock.Call
}

// SetTrailer is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ResourceService_WatchListServer_Expecter) SetTrailer(mD interface{}) *ResourceService_WatchListServer_SetTrailer_Call {
	return &ResourceService_WatchListServer_SetTrailer_Call{Call: _e.mock.On("SetTrailer", mD)}
}

func (_c *ResourceService_WatchListServer_SetTrailer_Call) Run(run func(mD metadata.MD)) *ResourceService_WatchListServer_SetTrailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ResourceService_WatchListServer_SetTrailer_Call) Return() *ResourceService_WatchListServer_SetTrailer_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResourceService_WatchListServer_SetTrailer_Call) RunAndReturn(run func(mD metadata.MD)) *ResourceService_WatchListServer_SetTrailer_Call {
	_c.Run(run)
	return _c
}
