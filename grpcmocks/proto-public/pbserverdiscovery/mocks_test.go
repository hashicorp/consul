// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockpbserverdiscovery

import (
	"context"

	"github.com/hashicorp/consul/proto-public/pbserverdiscovery"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// NewServerDiscoveryServiceClient creates a new instance of ServerDiscoveryServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerDiscoveryServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerDiscoveryServiceClient {
	mock := &ServerDiscoveryServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServerDiscoveryServiceClient is an autogenerated mock type for the ServerDiscoveryServiceClient type
type ServerDiscoveryServiceClient struct {
	mock.Mock
}

type ServerDiscoveryServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerDiscoveryServiceClient) EXPECT() *ServerDiscoveryServiceClient_Expecter {
	return &ServerDiscoveryServiceClient_Expecter{mock: &_m.Mock}
}

// WatchServers provides a mock function for the type ServerDiscoveryServiceClient
func (_mock *ServerDiscoveryServiceClient) WatchServers(ctx context.Context, in *pbserverdiscovery.WatchServersRequest, opts ...grpc.CallOption) (pbserverdiscovery.ServerDiscoveryService_WatchServersClient, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchServers")
	}

	var r0 pbserverdiscovery.ServerDiscoveryService_WatchServersClient
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbserverdiscovery.WatchServersRequest, ...grpc.CallOption) (pbserverdiscovery.ServerDiscoveryService_WatchServersClient, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbserverdiscovery.WatchServersRequest, ...grpc.CallOption) pbserverdiscovery.ServerDiscoveryService_WatchServersClient); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pbserverdiscovery.ServerDiscoveryService_WatchServersClient)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbserverdiscovery.WatchServersRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServerDiscoveryServiceClient_WatchServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchServers'
type ServerDiscoveryServiceClient_WatchServers_Call struct {
	*mock.Call
}

// WatchServers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbserverdiscovery.WatchServersRequest
//   - opts ...grpc.CallOption
func (_e *ServerDiscoveryServiceClient_Expecter) WatchServers(ctx interface{}, in interface{}, opts ...interface{}) *ServerDiscoveryServiceClient_WatchServers_Call {
	return &ServerDiscoveryServiceClient_WatchServers_Call{Call: _e.mock.On("WatchServers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ServerDiscoveryServiceClient_WatchServers_Call) Run(run func(ctx context.Context, in *pbserverdiscovery.WatchServersRequest, opts ...grpc.CallOption)) *ServerDiscoveryServiceClient_WatchServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbserverdiscovery.WatchServersRequest
		if args[1] != nil {
			arg1 = args[1].(*pbserverdiscovery.WatchServersRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ServerDiscoveryServiceClient_WatchServers_Call) Return(serverDiscoveryService_WatchServersClient pbserverdiscovery.ServerDiscoveryService_WatchServersClient, err error) *ServerDiscoveryServiceClient_WatchServers_Call {
	_c.Call.Return(serverDiscoveryService_WatchServersClient, err)
	return _c
}

func (_c *ServerDiscoveryServiceClient_WatchServers_Call) RunAndReturn(run func(ctx context.Context, in *pbserverdiscovery.WatchServersRequest, opts ...grpc.CallOption) (pbserverdiscovery.ServerDiscoveryService_WatchServersClient, error)) *ServerDiscoveryServiceClient_WatchServers_Call {
	_c.Call.Return(run)
	return _c
}

// NewServerDiscoveryService_WatchServersClient creates a new instance of ServerDiscoveryService_WatchServersClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerDiscoveryService_WatchServersClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerDiscoveryService_WatchServersClient {
	mock := &ServerDiscoveryService_WatchServersClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServerDiscoveryService_WatchServersClient is an autogenerated mock type for the ServerDiscoveryService_WatchServersClient type
type ServerDiscoveryService_WatchServersClient struct {
	mock.Mock
}

type ServerDiscoveryService_WatchServersClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerDiscoveryService_WatchServersClient) EXPECT() *ServerDiscoveryService_WatchServersClient_Expecter {
	return &ServerDiscoveryService_WatchServersClient_Expecter{mock: &_m.Mock}
}

// CloseSend provides a mock function for the type ServerDiscoveryService_WatchServersClient
func (_mock *ServerDiscoveryService_WatchServersClient) CloseSend() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseSend")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryService_WatchServersClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type ServerDiscoveryService_WatchServersClient_CloseSend_Call struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *ServerDiscoveryService_WatchServersClient_Expecter) CloseSend() *ServerDiscoveryService_WatchServersClient_CloseSend_Call {
	return &ServerDiscoveryService_WatchServersClient_CloseSend_Call{Call: _e.mock.On("CloseSend")}
}

func (_c *ServerDiscoveryService_WatchServersClient_CloseSend_Call) Run(run func()) *ServerDiscoveryService_WatchServersClient_CloseSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_CloseSend_Call) Return(err error) *ServerDiscoveryService_WatchServersClient_CloseSend_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_CloseSend_Call) RunAndReturn(run func() error) *ServerDiscoveryService_WatchServersClient_CloseSend_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function for the type ServerDiscoveryService_WatchServersClient
func (_mock *ServerDiscoveryService_WatchServersClient) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// ServerDiscoveryService_WatchServersClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type ServerDiscoveryService_WatchServersClient_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *ServerDiscoveryService_WatchServersClient_Expecter) Context() *ServerDiscoveryService_WatchServersClient_Context_Call {
	return &ServerDiscoveryService_WatchServersClient_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *ServerDiscoveryService_WatchServersClient_Context_Call) Run(run func()) *ServerDiscoveryService_WatchServersClient_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_Context_Call) Return(context1 context.Context) *ServerDiscoveryService_WatchServersClient_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_Context_Call) RunAndReturn(run func() context.Context) *ServerDiscoveryService_WatchServersClient_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function for the type ServerDiscoveryService_WatchServersClient
func (_mock *ServerDiscoveryService_WatchServersClient) Header() (metadata.MD, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 metadata.MD
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (metadata.MD, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServerDiscoveryService_WatchServersClient_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type ServerDiscoveryService_WatchServersClient_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *ServerDiscoveryService_WatchServersClient_Expecter) Header() *ServerDiscoveryService_WatchServersClient_Header_Call {
	return &ServerDiscoveryService_WatchServersClient_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *ServerDiscoveryService_WatchServersClient_Header_Call) Run(run func()) *ServerDiscoveryService_WatchServersClient_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_Header_Call) Return(mD metadata.MD, err error) *ServerDiscoveryService_WatchServersClient_Header_Call {
	_c.Call.Return(mD, err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_Header_Call) RunAndReturn(run func() (metadata.MD, error)) *ServerDiscoveryService_WatchServersClient_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type ServerDiscoveryService_WatchServersClient
func (_mock *ServerDiscoveryService_WatchServersClient) Recv() (*pbserverdiscovery.WatchServersResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 *pbserverdiscovery.WatchServersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*pbserverdiscovery.WatchServersResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *pbserverdiscovery.WatchServersResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbserverdiscovery.WatchServersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ServerDiscoveryService_WatchServersClient_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type ServerDiscoveryService_WatchServersClient_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *ServerDiscoveryService_WatchServersClient_Expecter) Recv() *ServerDiscoveryService_WatchServersClient_Recv_Call {
	return &ServerDiscoveryService_WatchServersClient_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *ServerDiscoveryService_WatchServersClient_Recv_Call) Run(run func()) *ServerDiscoveryService_WatchServersClient_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_Recv_Call) Return(watchServersResponse *pbserverdiscovery.WatchServersResponse, err error) *ServerDiscoveryService_WatchServersClient_Recv_Call {
	_c.Call.Return(watchServersResponse, err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_Recv_Call) RunAndReturn(run func() (*pbserverdiscovery.WatchServersResponse, error)) *ServerDiscoveryService_WatchServersClient_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type ServerDiscoveryService_WatchServersClient
func (_mock *ServerDiscoveryService_WatchServersClient) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryService_WatchServersClient_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type ServerDiscoveryService_WatchServersClient_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *ServerDiscoveryService_WatchServersClient_Expecter) RecvMsg(m interface{}) *ServerDiscoveryService_WatchServersClient_RecvMsg_Call {
	return &ServerDiscoveryService_WatchServersClient_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *ServerDiscoveryService_WatchServersClient_RecvMsg_Call) Run(run func(m any)) *ServerDiscoveryService_WatchServersClient_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_RecvMsg_Call) Return(err error) *ServerDiscoveryService_WatchServersClient_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_RecvMsg_Call) RunAndReturn(run func(m any) error) *ServerDiscoveryService_WatchServersClient_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type ServerDiscoveryService_WatchServersClient
func (_mock *ServerDiscoveryService_WatchServersClient) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryService_WatchServersClient_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type ServerDiscoveryService_WatchServersClient_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *ServerDiscoveryService_WatchServersClient_Expecter) SendMsg(m interface{}) *ServerDiscoveryService_WatchServersClient_SendMsg_Call {
	return &ServerDiscoveryService_WatchServersClient_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *ServerDiscoveryService_WatchServersClient_SendMsg_Call) Run(run func(m any)) *ServerDiscoveryService_WatchServersClient_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_SendMsg_Call) Return(err error) *ServerDiscoveryService_WatchServersClient_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_SendMsg_Call) RunAndReturn(run func(m any) error) *ServerDiscoveryService_WatchServersClient_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Trailer provides a mock function for the type ServerDiscoveryService_WatchServersClient
func (_mock *ServerDiscoveryService_WatchServersClient) Trailer() metadata.MD {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trailer")
	}

	var r0 metadata.MD
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	return r0
}

// ServerDiscoveryService_WatchServersClient_Trailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trailer'
type ServerDiscoveryService_WatchServersClient_Trailer_Call struct {
	*mock.Call
}

// Trailer is a helper method to define mock.On call
func (_e *ServerDiscoveryService_WatchServersClient_Expecter) Trailer() *ServerDiscoveryService_WatchServersClient_Trailer_Call {
	return &ServerDiscoveryService_WatchServersClient_Trailer_Call{Call: _e.mock.On("Trailer")}
}

func (_c *ServerDiscoveryService_WatchServersClient_Trailer_Call) Run(run func()) *ServerDiscoveryService_WatchServersClient_Trailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_Trailer_Call) Return(mD metadata.MD) *ServerDiscoveryService_WatchServersClient_Trailer_Call {
	_c.Call.Return(mD)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersClient_Trailer_Call) RunAndReturn(run func() metadata.MD) *ServerDiscoveryService_WatchServersClient_Trailer_Call {
	_c.Call.Return(run)
	return _c
}

// NewServerDiscoveryServiceServer creates a new instance of ServerDiscoveryServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerDiscoveryServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerDiscoveryServiceServer {
	mock := &ServerDiscoveryServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServerDiscoveryServiceServer is an autogenerated mock type for the ServerDiscoveryServiceServer type
type ServerDiscoveryServiceServer struct {
	mock.Mock
}

type ServerDiscoveryServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerDiscoveryServiceServer) EXPECT() *ServerDiscoveryServiceServer_Expecter {
	return &ServerDiscoveryServiceServer_Expecter{mock: &_m.Mock}
}

// WatchServers provides a mock function for the type ServerDiscoveryServiceServer
func (_mock *ServerDiscoveryServiceServer) WatchServers(watchServersRequest *pbserverdiscovery.WatchServersRequest, serverDiscoveryService_WatchServersServer pbserverdiscovery.ServerDiscoveryService_WatchServersServer) error {
	ret := _mock.Called(watchServersRequest, serverDiscoveryService_WatchServersServer)

	if len(ret) == 0 {
		panic("no return value specified for WatchServers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*pbserverdiscovery.WatchServersRequest, pbserverdiscovery.ServerDiscoveryService_WatchServersServer) error); ok {
		r0 = returnFunc(watchServersRequest, serverDiscoveryService_WatchServersServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryServiceServer_WatchServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchServers'
type ServerDiscoveryServiceServer_WatchServers_Call struct {
	*mock.Call
}

// WatchServers is a helper method to define mock.On call
//   - watchServersRequest *pbserverdiscovery.WatchServersRequest
//   - serverDiscoveryService_WatchServersServer pbserverdiscovery.ServerDiscoveryService_WatchServersServer
func (_e *ServerDiscoveryServiceServer_Expecter) WatchServers(watchServersRequest interface{}, serverDiscoveryService_WatchServersServer interface{}) *ServerDiscoveryServiceServer_WatchServers_Call {
	return &ServerDiscoveryServiceServer_WatchServers_Call{Call: _e.mock.On("WatchServers", watchServersRequest, serverDiscoveryService_WatchServersServer)}
}

func (_c *ServerDiscoveryServiceServer_WatchServers_Call) Run(run func(watchServersRequest *pbserverdiscovery.WatchServersRequest, serverDiscoveryService_WatchServersServer pbserverdiscovery.ServerDiscoveryService_WatchServersServer)) *ServerDiscoveryServiceServer_WatchServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pbserverdiscovery.WatchServersRequest
		if args[0] != nil {
			arg0 = args[0].(*pbserverdiscovery.WatchServersRequest)
		}
		var arg1 pbserverdiscovery.ServerDiscoveryService_WatchServersServer
		if args[1] != nil {
			arg1 = args[1].(pbserverdiscovery.ServerDiscoveryService_WatchServersServer)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ServerDiscoveryServiceServer_WatchServers_Call) Return(err error) *ServerDiscoveryServiceServer_WatchServers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryServiceServer_WatchServers_Call) RunAndReturn(run func(watchServersRequest *pbserverdiscovery.WatchServersRequest, serverDiscoveryService_WatchServersServer pbserverdiscovery.ServerDiscoveryService_WatchServersServer) error) *ServerDiscoveryServiceServer_WatchServers_Call {
	_c.Call.Return(run)
	return _c
}

// NewUnsafeServerDiscoveryServiceServer creates a new instance of UnsafeServerDiscoveryServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnsafeServerDiscoveryServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnsafeServerDiscoveryServiceServer {
	mock := &UnsafeServerDiscoveryServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UnsafeServerDiscoveryServiceServer is an autogenerated mock type for the UnsafeServerDiscoveryServiceServer type
type UnsafeServerDiscoveryServiceServer struct {
	mock.Mock
}

type UnsafeServerDiscoveryServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *UnsafeServerDiscoveryServiceServer) EXPECT() *UnsafeServerDiscoveryServiceServer_Expecter {
	return &UnsafeServerDiscoveryServiceServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedServerDiscoveryServiceServer provides a mock function for the type UnsafeServerDiscoveryServiceServer
func (_mock *UnsafeServerDiscoveryServiceServer) mustEmbedUnimplementedServerDiscoveryServiceServer() {
	_mock.Called()
	return
}

// UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedServerDiscoveryServiceServer'
type UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedServerDiscoveryServiceServer is a helper method to define mock.On call
func (_e *UnsafeServerDiscoveryServiceServer_Expecter) mustEmbedUnimplementedServerDiscoveryServiceServer() *UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call {
	return &UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedServerDiscoveryServiceServer")}
}

func (_c *UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call) Run(run func()) *UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call) Return() *UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call) RunAndReturn(run func()) *UnsafeServerDiscoveryServiceServer_mustEmbedUnimplementedServerDiscoveryServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewServerDiscoveryService_WatchServersServer creates a new instance of ServerDiscoveryService_WatchServersServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerDiscoveryService_WatchServersServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerDiscoveryService_WatchServersServer {
	mock := &ServerDiscoveryService_WatchServersServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ServerDiscoveryService_WatchServersServer is an autogenerated mock type for the ServerDiscoveryService_WatchServersServer type
type ServerDiscoveryService_WatchServersServer struct {
	mock.Mock
}

type ServerDiscoveryService_WatchServersServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ServerDiscoveryService_WatchServersServer) EXPECT() *ServerDiscoveryService_WatchServersServer_Expecter {
	return &ServerDiscoveryService_WatchServersServer_Expecter{mock: &_m.Mock}
}

// Context provides a mock function for the type ServerDiscoveryService_WatchServersServer
func (_mock *ServerDiscoveryService_WatchServersServer) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// ServerDiscoveryService_WatchServersServer_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type ServerDiscoveryService_WatchServersServer_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *ServerDiscoveryService_WatchServersServer_Expecter) Context() *ServerDiscoveryService_WatchServersServer_Context_Call {
	return &ServerDiscoveryService_WatchServersServer_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *ServerDiscoveryService_WatchServersServer_Context_Call) Run(run func()) *ServerDiscoveryService_WatchServersServer_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_Context_Call) Return(context1 context.Context) *ServerDiscoveryService_WatchServersServer_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_Context_Call) RunAndReturn(run func() context.Context) *ServerDiscoveryService_WatchServersServer_Context_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type ServerDiscoveryService_WatchServersServer
func (_mock *ServerDiscoveryService_WatchServersServer) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryService_WatchServersServer_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type ServerDiscoveryService_WatchServersServer_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *ServerDiscoveryService_WatchServersServer_Expecter) RecvMsg(m interface{}) *ServerDiscoveryService_WatchServersServer_RecvMsg_Call {
	return &ServerDiscoveryService_WatchServersServer_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *ServerDiscoveryService_WatchServersServer_RecvMsg_Call) Run(run func(m any)) *ServerDiscoveryService_WatchServersServer_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_RecvMsg_Call) Return(err error) *ServerDiscoveryService_WatchServersServer_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_RecvMsg_Call) RunAndReturn(run func(m any) error) *ServerDiscoveryService_WatchServersServer_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type ServerDiscoveryService_WatchServersServer
func (_mock *ServerDiscoveryService_WatchServersServer) Send(watchServersResponse *pbserverdiscovery.WatchServersResponse) error {
	ret := _mock.Called(watchServersResponse)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*pbserverdiscovery.WatchServersResponse) error); ok {
		r0 = returnFunc(watchServersResponse)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryService_WatchServersServer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type ServerDiscoveryService_WatchServersServer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - watchServersResponse *pbserverdiscovery.WatchServersResponse
func (_e *ServerDiscoveryService_WatchServersServer_Expecter) Send(watchServersResponse interface{}) *ServerDiscoveryService_WatchServersServer_Send_Call {
	return &ServerDiscoveryService_WatchServersServer_Send_Call{Call: _e.mock.On("Send", watchServersResponse)}
}

func (_c *ServerDiscoveryService_WatchServersServer_Send_Call) Run(run func(watchServersResponse *pbserverdiscovery.WatchServersResponse)) *ServerDiscoveryService_WatchServersServer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pbserverdiscovery.WatchServersResponse
		if args[0] != nil {
			arg0 = args[0].(*pbserverdiscovery.WatchServersResponse)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_Send_Call) Return(err error) *ServerDiscoveryService_WatchServersServer_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_Send_Call) RunAndReturn(run func(watchServersResponse *pbserverdiscovery.WatchServersResponse) error) *ServerDiscoveryService_WatchServersServer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendHeader provides a mock function for the type ServerDiscoveryService_WatchServersServer
func (_mock *ServerDiscoveryService_WatchServersServer) SendHeader(mD metadata.MD) error {
	ret := _mock.Called(mD)

	if len(ret) == 0 {
		panic("no return value specified for SendHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = returnFunc(mD)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryService_WatchServersServer_SendHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeader'
type ServerDiscoveryService_WatchServersServer_SendHeader_Call struct {
	*mock.Call
}

// SendHeader is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ServerDiscoveryService_WatchServersServer_Expecter) SendHeader(mD interface{}) *ServerDiscoveryService_WatchServersServer_SendHeader_Call {
	return &ServerDiscoveryService_WatchServersServer_SendHeader_Call{Call: _e.mock.On("SendHeader", mD)}
}

func (_c *ServerDiscoveryService_WatchServersServer_SendHeader_Call) Run(run func(mD metadata.MD)) *ServerDiscoveryService_WatchServersServer_SendHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_SendHeader_Call) Return(err error) *ServerDiscoveryService_WatchServersServer_SendHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_SendHeader_Call) RunAndReturn(run func(mD metadata.MD) error) *ServerDiscoveryService_WatchServersServer_SendHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type ServerDiscoveryService_WatchServersServer
func (_mock *ServerDiscoveryService_WatchServersServer) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryService_WatchServersServer_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type ServerDiscoveryService_WatchServersServer_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *ServerDiscoveryService_WatchServersServer_Expecter) SendMsg(m interface{}) *ServerDiscoveryService_WatchServersServer_SendMsg_Call {
	return &ServerDiscoveryService_WatchServersServer_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *ServerDiscoveryService_WatchServersServer_SendMsg_Call) Run(run func(m any)) *ServerDiscoveryService_WatchServersServer_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_SendMsg_Call) Return(err error) *ServerDiscoveryService_WatchServersServer_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_SendMsg_Call) RunAndReturn(run func(m any) error) *ServerDiscoveryService_WatchServersServer_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeader provides a mock function for the type ServerDiscoveryService_WatchServersServer
func (_mock *ServerDiscoveryService_WatchServersServer) SetHeader(mD metadata.MD) error {
	ret := _mock.Called(mD)

	if len(ret) == 0 {
		panic("no return value specified for SetHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = returnFunc(mD)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ServerDiscoveryService_WatchServersServer_SetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeader'
type ServerDiscoveryService_WatchServersServer_SetHeader_Call struct {
	*mock.Call
}

// SetHeader is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ServerDiscoveryService_WatchServersServer_Expecter) SetHeader(mD interface{}) *ServerDiscoveryService_WatchServersServer_SetHeader_Call {
	return &ServerDiscoveryService_WatchServersServer_SetHeader_Call{Call: _e.mock.On("SetHeader", mD)}
}

func (_c *ServerDiscoveryService_WatchServersServer_SetHeader_Call) Run(run func(mD metadata.MD)) *ServerDiscoveryService_WatchServersServer_SetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_SetHeader_Call) Return(err error) *ServerDiscoveryService_WatchServersServer_SetHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_SetHeader_Call) RunAndReturn(run func(mD metadata.MD) error) *ServerDiscoveryService_WatchServersServer_SetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetTrailer provides a mock function for the type ServerDiscoveryService_WatchServersServer
func (_mock *ServerDiscoveryService_WatchServersServer) SetTrailer(mD metadata.MD) {
	_mock.Called(mD)
	return
}

// ServerDiscoveryService_WatchServersServer_SetTrailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTrailer'
type ServerDiscoveryService_WatchServersServer_SetTrailer_Call struct {
	*mock.Call
}

// SetTrailer is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ServerDiscoveryService_WatchServersServer_Expecter) SetTrailer(mD interface{}) *ServerDiscoveryService_WatchServersServer_SetTrailer_Call {
	return &ServerDiscoveryService_WatchServersServer_SetTrailer_Call{Call: _e.mock.On("SetTrailer", mD)}
}

func (_c *ServerDiscoveryService_WatchServersServer_SetTrailer_Call) Run(run func(mD metadata.MD)) *ServerDiscoveryService_WatchServersServer_SetTrailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_SetTrailer_Call) Return() *ServerDiscoveryService_WatchServersServer_SetTrailer_Call {
	_c.Call.Return()
	return _c
}

func (_c *ServerDiscoveryService_WatchServersServer_SetTrailer_Call) RunAndReturn(run func(mD metadata.MD)) *ServerDiscoveryService_WatchServersServer_SetTrailer_Call {
	_c.Run(run)
	return _c
}
