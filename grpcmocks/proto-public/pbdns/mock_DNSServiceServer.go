// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockpbdns

import (
	"context"

	"github.com/hashicorp/consul/proto-public/pbdns"
	mock "github.com/stretchr/testify/mock"
)

// NewDNSServiceServer creates a new instance of DNSServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDNSServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *DNSServiceServer {
	mock := &DNSServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DNSServiceServer is an autogenerated mock type for the DNSServiceServer type
type DNSServiceServer struct {
	mock.Mock
}

type DNSServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *DNSServiceServer) EXPECT() *DNSServiceServer_Expecter {
	return &DNSServiceServer_Expecter{mock: &_m.Mock}
}

// Query provides a mock function for the type DNSServiceServer
func (_mock *DNSServiceServer) Query(context1 context.Context, queryRequest *pbdns.QueryRequest) (*pbdns.QueryResponse, error) {
	ret := _mock.Called(context1, queryRequest)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *pbdns.QueryResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbdns.QueryRequest) (*pbdns.QueryResponse, error)); ok {
		return returnFunc(context1, queryRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbdns.QueryRequest) *pbdns.QueryResponse); ok {
		r0 = returnFunc(context1, queryRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbdns.QueryResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbdns.QueryRequest) error); ok {
		r1 = returnFunc(context1, queryRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DNSServiceServer_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type DNSServiceServer_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - context1 context.Context
//   - queryRequest *pbdns.QueryRequest
func (_e *DNSServiceServer_Expecter) Query(context1 interface{}, queryRequest interface{}) *DNSServiceServer_Query_Call {
	return &DNSServiceServer_Query_Call{Call: _e.mock.On("Query", context1, queryRequest)}
}

func (_c *DNSServiceServer_Query_Call) Run(run func(context1 context.Context, queryRequest *pbdns.QueryRequest)) *DNSServiceServer_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbdns.QueryRequest
		if args[1] != nil {
			arg1 = args[1].(*pbdns.QueryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *DNSServiceServer_Query_Call) Return(queryResponse *pbdns.QueryResponse, err error) *DNSServiceServer_Query_Call {
	_c.Call.Return(queryResponse, err)
	return _c
}

func (_c *DNSServiceServer_Query_Call) RunAndReturn(run func(context1 context.Context, queryRequest *pbdns.QueryRequest) (*pbdns.QueryResponse, error)) *DNSServiceServer_Query_Call {
	_c.Call.Return(run)
	return _c
}
