// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockpbconnectca

import (
	"context"

	"github.com/hashicorp/consul/proto-public/pbconnectca"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc/metadata"
)

// NewConnectCAService_WatchRootsServer creates a new instance of ConnectCAService_WatchRootsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectCAService_WatchRootsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectCAService_WatchRootsServer {
	mock := &ConnectCAService_WatchRootsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectCAService_WatchRootsServer is an autogenerated mock type for the ConnectCAService_WatchRootsServer type
type ConnectCAService_WatchRootsServer struct {
	mock.Mock
}

type ConnectCAService_WatchRootsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectCAService_WatchRootsServer) EXPECT() *ConnectCAService_WatchRootsServer_Expecter {
	return &ConnectCAService_WatchRootsServer_Expecter{mock: &_m.Mock}
}

// Context provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// ConnectCAService_WatchRootsServer_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type ConnectCAService_WatchRootsServer_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *ConnectCAService_WatchRootsServer_Expecter) Context() *ConnectCAService_WatchRootsServer_Context_Call {
	return &ConnectCAService_WatchRootsServer_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *ConnectCAService_WatchRootsServer_Context_Call) Run(run func()) *ConnectCAService_WatchRootsServer_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_Context_Call) Return(context1 context.Context) *ConnectCAService_WatchRootsServer_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_Context_Call) RunAndReturn(run func() context.Context) *ConnectCAService_WatchRootsServer_Context_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type ConnectCAService_WatchRootsServer_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *ConnectCAService_WatchRootsServer_Expecter) RecvMsg(m interface{}) *ConnectCAService_WatchRootsServer_RecvMsg_Call {
	return &ConnectCAService_WatchRootsServer_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *ConnectCAService_WatchRootsServer_RecvMsg_Call) Run(run func(m any)) *ConnectCAService_WatchRootsServer_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_RecvMsg_Call) Return(err error) *ConnectCAService_WatchRootsServer_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_RecvMsg_Call) RunAndReturn(run func(m any) error) *ConnectCAService_WatchRootsServer_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) Send(watchRootsResponse *pbconnectca.WatchRootsResponse) error {
	ret := _mock.Called(watchRootsResponse)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*pbconnectca.WatchRootsResponse) error); ok {
		r0 = returnFunc(watchRootsResponse)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type ConnectCAService_WatchRootsServer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - watchRootsResponse *pbconnectca.WatchRootsResponse
func (_e *ConnectCAService_WatchRootsServer_Expecter) Send(watchRootsResponse interface{}) *ConnectCAService_WatchRootsServer_Send_Call {
	return &ConnectCAService_WatchRootsServer_Send_Call{Call: _e.mock.On("Send", watchRootsResponse)}
}

func (_c *ConnectCAService_WatchRootsServer_Send_Call) Run(run func(watchRootsResponse *pbconnectca.WatchRootsResponse)) *ConnectCAService_WatchRootsServer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pbconnectca.WatchRootsResponse
		if args[0] != nil {
			arg0 = args[0].(*pbconnectca.WatchRootsResponse)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_Send_Call) Return(err error) *ConnectCAService_WatchRootsServer_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_Send_Call) RunAndReturn(run func(watchRootsResponse *pbconnectca.WatchRootsResponse) error) *ConnectCAService_WatchRootsServer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendHeader provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) SendHeader(mD metadata.MD) error {
	ret := _mock.Called(mD)

	if len(ret) == 0 {
		panic("no return value specified for SendHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = returnFunc(mD)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_SendHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeader'
type ConnectCAService_WatchRootsServer_SendHeader_Call struct {
	*mock.Call
}

// SendHeader is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ConnectCAService_WatchRootsServer_Expecter) SendHeader(mD interface{}) *ConnectCAService_WatchRootsServer_SendHeader_Call {
	return &ConnectCAService_WatchRootsServer_SendHeader_Call{Call: _e.mock.On("SendHeader", mD)}
}

func (_c *ConnectCAService_WatchRootsServer_SendHeader_Call) Run(run func(mD metadata.MD)) *ConnectCAService_WatchRootsServer_SendHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SendHeader_Call) Return(err error) *ConnectCAService_WatchRootsServer_SendHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SendHeader_Call) RunAndReturn(run func(mD metadata.MD) error) *ConnectCAService_WatchRootsServer_SendHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type ConnectCAService_WatchRootsServer_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *ConnectCAService_WatchRootsServer_Expecter) SendMsg(m interface{}) *ConnectCAService_WatchRootsServer_SendMsg_Call {
	return &ConnectCAService_WatchRootsServer_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *ConnectCAService_WatchRootsServer_SendMsg_Call) Run(run func(m any)) *ConnectCAService_WatchRootsServer_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SendMsg_Call) Return(err error) *ConnectCAService_WatchRootsServer_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SendMsg_Call) RunAndReturn(run func(m any) error) *ConnectCAService_WatchRootsServer_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeader provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) SetHeader(mD metadata.MD) error {
	ret := _mock.Called(mD)

	if len(ret) == 0 {
		panic("no return value specified for SetHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = returnFunc(mD)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_SetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeader'
type ConnectCAService_WatchRootsServer_SetHeader_Call struct {
	*mock.Call
}

// SetHeader is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ConnectCAService_WatchRootsServer_Expecter) SetHeader(mD interface{}) *ConnectCAService_WatchRootsServer_SetHeader_Call {
	return &ConnectCAService_WatchRootsServer_SetHeader_Call{Call: _e.mock.On("SetHeader", mD)}
}

func (_c *ConnectCAService_WatchRootsServer_SetHeader_Call) Run(run func(mD metadata.MD)) *ConnectCAService_WatchRootsServer_SetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SetHeader_Call) Return(err error) *ConnectCAService_WatchRootsServer_SetHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SetHeader_Call) RunAndReturn(run func(mD metadata.MD) error) *ConnectCAService_WatchRootsServer_SetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetTrailer provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) SetTrailer(mD metadata.MD) {
	_mock.Called(mD)
	return
}

// ConnectCAService_WatchRootsServer_SetTrailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTrailer'
type ConnectCAService_WatchRootsServer_SetTrailer_Call struct {
	*mock.Call
}

// SetTrailer is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ConnectCAService_WatchRootsServer_Expecter) SetTrailer(mD interface{}) *ConnectCAService_WatchRootsServer_SetTrailer_Call {
	return &ConnectCAService_WatchRootsServer_SetTrailer_Call{Call: _e.mock.On("SetTrailer", mD)}
}

func (_c *ConnectCAService_WatchRootsServer_SetTrailer_Call) Run(run func(mD metadata.MD)) *ConnectCAService_WatchRootsServer_SetTrailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SetTrailer_Call) Return() *ConnectCAService_WatchRootsServer_SetTrailer_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SetTrailer_Call) RunAndReturn(run func(mD metadata.MD)) *ConnectCAService_WatchRootsServer_SetTrailer_Call {
	_c.Run(run)
	return _c
}
