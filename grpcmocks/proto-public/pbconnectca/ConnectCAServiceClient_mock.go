// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockpbconnectca

import (
	"context"

	"github.com/hashicorp/consul/proto-public/pbconnectca"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewConnectCAServiceClient creates a new instance of ConnectCAServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectCAServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectCAServiceClient {
	mock := &ConnectCAServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectCAServiceClient is an autogenerated mock type for the ConnectCAServiceClient type
type ConnectCAServiceClient struct {
	mock.Mock
}

type ConnectCAServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectCAServiceClient) EXPECT() *ConnectCAServiceClient_Expecter {
	return &ConnectCAServiceClient_Expecter{mock: &_m.Mock}
}

// Sign provides a mock function for the type ConnectCAServiceClient
func (_mock *ConnectCAServiceClient) Sign(ctx context.Context, in *pbconnectca.SignRequest, opts ...grpc.CallOption) (*pbconnectca.SignResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *pbconnectca.SignResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.SignRequest, ...grpc.CallOption) (*pbconnectca.SignResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.SignRequest, ...grpc.CallOption) *pbconnectca.SignResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbconnectca.SignResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbconnectca.SignRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectCAServiceClient_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type ConnectCAServiceClient_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbconnectca.SignRequest
//   - opts ...grpc.CallOption
func (_e *ConnectCAServiceClient_Expecter) Sign(ctx interface{}, in interface{}, opts ...interface{}) *ConnectCAServiceClient_Sign_Call {
	return &ConnectCAServiceClient_Sign_Call{Call: _e.mock.On("Sign",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ConnectCAServiceClient_Sign_Call) Run(run func(ctx context.Context, in *pbconnectca.SignRequest, opts ...grpc.CallOption)) *ConnectCAServiceClient_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbconnectca.SignRequest
		if args[1] != nil {
			arg1 = args[1].(*pbconnectca.SignRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectCAServiceClient_Sign_Call) Return(signResponse *pbconnectca.SignResponse, err error) *ConnectCAServiceClient_Sign_Call {
	_c.Call.Return(signResponse, err)
	return _c
}

func (_c *ConnectCAServiceClient_Sign_Call) RunAndReturn(run func(ctx context.Context, in *pbconnectca.SignRequest, opts ...grpc.CallOption) (*pbconnectca.SignResponse, error)) *ConnectCAServiceClient_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// WatchRoots provides a mock function for the type ConnectCAServiceClient
func (_mock *ConnectCAServiceClient) WatchRoots(ctx context.Context, in *pbconnectca.WatchRootsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse], error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchRoots")
	}

	var r0 grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.WatchRootsRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.WatchRootsRequest, ...grpc.CallOption) grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbconnectca.WatchRootsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectCAServiceClient_WatchRoots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchRoots'
type ConnectCAServiceClient_WatchRoots_Call struct {
	*mock.Call
}

// WatchRoots is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbconnectca.WatchRootsRequest
//   - opts ...grpc.CallOption
func (_e *ConnectCAServiceClient_Expecter) WatchRoots(ctx interface{}, in interface{}, opts ...interface{}) *ConnectCAServiceClient_WatchRoots_Call {
	return &ConnectCAServiceClient_WatchRoots_Call{Call: _e.mock.On("WatchRoots",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ConnectCAServiceClient_WatchRoots_Call) Run(run func(ctx context.Context, in *pbconnectca.WatchRootsRequest, opts ...grpc.CallOption)) *ConnectCAServiceClient_WatchRoots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbconnectca.WatchRootsRequest
		if args[1] != nil {
			arg1 = args[1].(*pbconnectca.WatchRootsRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectCAServiceClient_WatchRoots_Call) Return(serverStreamingClient grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse], err error) *ConnectCAServiceClient_WatchRoots_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *ConnectCAServiceClient_WatchRoots_Call) RunAndReturn(run func(ctx context.Context, in *pbconnectca.WatchRootsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse], error)) *ConnectCAServiceClient_WatchRoots_Call {
	_c.Call.Return(run)
	return _c
}
