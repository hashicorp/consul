// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockpbconnectca

import (
	"context"

	"github.com/hashicorp/consul/proto-public/pbconnectca"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// NewConnectCAServiceClient creates a new instance of ConnectCAServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectCAServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectCAServiceClient {
	mock := &ConnectCAServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectCAServiceClient is an autogenerated mock type for the ConnectCAServiceClient type
type ConnectCAServiceClient struct {
	mock.Mock
}

type ConnectCAServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectCAServiceClient) EXPECT() *ConnectCAServiceClient_Expecter {
	return &ConnectCAServiceClient_Expecter{mock: &_m.Mock}
}

// Sign provides a mock function for the type ConnectCAServiceClient
func (_mock *ConnectCAServiceClient) Sign(ctx context.Context, in *pbconnectca.SignRequest, opts ...grpc.CallOption) (*pbconnectca.SignResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *pbconnectca.SignResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.SignRequest, ...grpc.CallOption) (*pbconnectca.SignResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.SignRequest, ...grpc.CallOption) *pbconnectca.SignResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbconnectca.SignResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbconnectca.SignRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectCAServiceClient_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type ConnectCAServiceClient_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbconnectca.SignRequest
//   - opts ...grpc.CallOption
func (_e *ConnectCAServiceClient_Expecter) Sign(ctx interface{}, in interface{}, opts ...interface{}) *ConnectCAServiceClient_Sign_Call {
	return &ConnectCAServiceClient_Sign_Call{Call: _e.mock.On("Sign",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ConnectCAServiceClient_Sign_Call) Run(run func(ctx context.Context, in *pbconnectca.SignRequest, opts ...grpc.CallOption)) *ConnectCAServiceClient_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbconnectca.SignRequest
		if args[1] != nil {
			arg1 = args[1].(*pbconnectca.SignRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectCAServiceClient_Sign_Call) Return(signResponse *pbconnectca.SignResponse, err error) *ConnectCAServiceClient_Sign_Call {
	_c.Call.Return(signResponse, err)
	return _c
}

func (_c *ConnectCAServiceClient_Sign_Call) RunAndReturn(run func(ctx context.Context, in *pbconnectca.SignRequest, opts ...grpc.CallOption) (*pbconnectca.SignResponse, error)) *ConnectCAServiceClient_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// WatchRoots provides a mock function for the type ConnectCAServiceClient
func (_mock *ConnectCAServiceClient) WatchRoots(ctx context.Context, in *pbconnectca.WatchRootsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse], error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WatchRoots")
	}

	var r0 grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.WatchRootsRequest, ...grpc.CallOption) (grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse], error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.WatchRootsRequest, ...grpc.CallOption) grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse]); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbconnectca.WatchRootsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectCAServiceClient_WatchRoots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchRoots'
type ConnectCAServiceClient_WatchRoots_Call struct {
	*mock.Call
}

// WatchRoots is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pbconnectca.WatchRootsRequest
//   - opts ...grpc.CallOption
func (_e *ConnectCAServiceClient_Expecter) WatchRoots(ctx interface{}, in interface{}, opts ...interface{}) *ConnectCAServiceClient_WatchRoots_Call {
	return &ConnectCAServiceClient_WatchRoots_Call{Call: _e.mock.On("WatchRoots",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ConnectCAServiceClient_WatchRoots_Call) Run(run func(ctx context.Context, in *pbconnectca.WatchRootsRequest, opts ...grpc.CallOption)) *ConnectCAServiceClient_WatchRoots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbconnectca.WatchRootsRequest
		if args[1] != nil {
			arg1 = args[1].(*pbconnectca.WatchRootsRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *ConnectCAServiceClient_WatchRoots_Call) Return(serverStreamingClient grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse], err error) *ConnectCAServiceClient_WatchRoots_Call {
	_c.Call.Return(serverStreamingClient, err)
	return _c
}

func (_c *ConnectCAServiceClient_WatchRoots_Call) RunAndReturn(run func(ctx context.Context, in *pbconnectca.WatchRootsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pbconnectca.WatchRootsResponse], error)) *ConnectCAServiceClient_WatchRoots_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectCAService_WatchRootsClient creates a new instance of ConnectCAService_WatchRootsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectCAService_WatchRootsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectCAService_WatchRootsClient {
	mock := &ConnectCAService_WatchRootsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectCAService_WatchRootsClient is an autogenerated mock type for the ConnectCAService_WatchRootsClient type
type ConnectCAService_WatchRootsClient struct {
	mock.Mock
}

type ConnectCAService_WatchRootsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectCAService_WatchRootsClient) EXPECT() *ConnectCAService_WatchRootsClient_Expecter {
	return &ConnectCAService_WatchRootsClient_Expecter{mock: &_m.Mock}
}

// CloseSend provides a mock function for the type ConnectCAService_WatchRootsClient
func (_mock *ConnectCAService_WatchRootsClient) CloseSend() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseSend")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsClient_CloseSend_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseSend'
type ConnectCAService_WatchRootsClient_CloseSend_Call struct {
	*mock.Call
}

// CloseSend is a helper method to define mock.On call
func (_e *ConnectCAService_WatchRootsClient_Expecter) CloseSend() *ConnectCAService_WatchRootsClient_CloseSend_Call {
	return &ConnectCAService_WatchRootsClient_CloseSend_Call{Call: _e.mock.On("CloseSend")}
}

func (_c *ConnectCAService_WatchRootsClient_CloseSend_Call) Run(run func()) *ConnectCAService_WatchRootsClient_CloseSend_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_CloseSend_Call) Return(err error) *ConnectCAService_WatchRootsClient_CloseSend_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_CloseSend_Call) RunAndReturn(run func() error) *ConnectCAService_WatchRootsClient_CloseSend_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function for the type ConnectCAService_WatchRootsClient
func (_mock *ConnectCAService_WatchRootsClient) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// ConnectCAService_WatchRootsClient_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type ConnectCAService_WatchRootsClient_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *ConnectCAService_WatchRootsClient_Expecter) Context() *ConnectCAService_WatchRootsClient_Context_Call {
	return &ConnectCAService_WatchRootsClient_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *ConnectCAService_WatchRootsClient_Context_Call) Run(run func()) *ConnectCAService_WatchRootsClient_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_Context_Call) Return(context1 context.Context) *ConnectCAService_WatchRootsClient_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_Context_Call) RunAndReturn(run func() context.Context) *ConnectCAService_WatchRootsClient_Context_Call {
	_c.Call.Return(run)
	return _c
}

// Header provides a mock function for the type ConnectCAService_WatchRootsClient
func (_mock *ConnectCAService_WatchRootsClient) Header() (metadata.MD, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Header")
	}

	var r0 metadata.MD
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (metadata.MD, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectCAService_WatchRootsClient_Header_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Header'
type ConnectCAService_WatchRootsClient_Header_Call struct {
	*mock.Call
}

// Header is a helper method to define mock.On call
func (_e *ConnectCAService_WatchRootsClient_Expecter) Header() *ConnectCAService_WatchRootsClient_Header_Call {
	return &ConnectCAService_WatchRootsClient_Header_Call{Call: _e.mock.On("Header")}
}

func (_c *ConnectCAService_WatchRootsClient_Header_Call) Run(run func()) *ConnectCAService_WatchRootsClient_Header_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_Header_Call) Return(mD metadata.MD, err error) *ConnectCAService_WatchRootsClient_Header_Call {
	_c.Call.Return(mD, err)
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_Header_Call) RunAndReturn(run func() (metadata.MD, error)) *ConnectCAService_WatchRootsClient_Header_Call {
	_c.Call.Return(run)
	return _c
}

// Recv provides a mock function for the type ConnectCAService_WatchRootsClient
func (_mock *ConnectCAService_WatchRootsClient) Recv() (*pbconnectca.WatchRootsResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Recv")
	}

	var r0 *pbconnectca.WatchRootsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*pbconnectca.WatchRootsResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *pbconnectca.WatchRootsResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbconnectca.WatchRootsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectCAService_WatchRootsClient_Recv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recv'
type ConnectCAService_WatchRootsClient_Recv_Call struct {
	*mock.Call
}

// Recv is a helper method to define mock.On call
func (_e *ConnectCAService_WatchRootsClient_Expecter) Recv() *ConnectCAService_WatchRootsClient_Recv_Call {
	return &ConnectCAService_WatchRootsClient_Recv_Call{Call: _e.mock.On("Recv")}
}

func (_c *ConnectCAService_WatchRootsClient_Recv_Call) Run(run func()) *ConnectCAService_WatchRootsClient_Recv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_Recv_Call) Return(watchRootsResponse *pbconnectca.WatchRootsResponse, err error) *ConnectCAService_WatchRootsClient_Recv_Call {
	_c.Call.Return(watchRootsResponse, err)
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_Recv_Call) RunAndReturn(run func() (*pbconnectca.WatchRootsResponse, error)) *ConnectCAService_WatchRootsClient_Recv_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type ConnectCAService_WatchRootsClient
func (_mock *ConnectCAService_WatchRootsClient) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsClient_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type ConnectCAService_WatchRootsClient_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *ConnectCAService_WatchRootsClient_Expecter) RecvMsg(m interface{}) *ConnectCAService_WatchRootsClient_RecvMsg_Call {
	return &ConnectCAService_WatchRootsClient_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *ConnectCAService_WatchRootsClient_RecvMsg_Call) Run(run func(m any)) *ConnectCAService_WatchRootsClient_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_RecvMsg_Call) Return(err error) *ConnectCAService_WatchRootsClient_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_RecvMsg_Call) RunAndReturn(run func(m any) error) *ConnectCAService_WatchRootsClient_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type ConnectCAService_WatchRootsClient
func (_mock *ConnectCAService_WatchRootsClient) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsClient_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type ConnectCAService_WatchRootsClient_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *ConnectCAService_WatchRootsClient_Expecter) SendMsg(m interface{}) *ConnectCAService_WatchRootsClient_SendMsg_Call {
	return &ConnectCAService_WatchRootsClient_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *ConnectCAService_WatchRootsClient_SendMsg_Call) Run(run func(m any)) *ConnectCAService_WatchRootsClient_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_SendMsg_Call) Return(err error) *ConnectCAService_WatchRootsClient_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_SendMsg_Call) RunAndReturn(run func(m any) error) *ConnectCAService_WatchRootsClient_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Trailer provides a mock function for the type ConnectCAService_WatchRootsClient
func (_mock *ConnectCAService_WatchRootsClient) Trailer() metadata.MD {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Trailer")
	}

	var r0 metadata.MD
	if returnFunc, ok := ret.Get(0).(func() metadata.MD); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.MD)
		}
	}
	return r0
}

// ConnectCAService_WatchRootsClient_Trailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Trailer'
type ConnectCAService_WatchRootsClient_Trailer_Call struct {
	*mock.Call
}

// Trailer is a helper method to define mock.On call
func (_e *ConnectCAService_WatchRootsClient_Expecter) Trailer() *ConnectCAService_WatchRootsClient_Trailer_Call {
	return &ConnectCAService_WatchRootsClient_Trailer_Call{Call: _e.mock.On("Trailer")}
}

func (_c *ConnectCAService_WatchRootsClient_Trailer_Call) Run(run func()) *ConnectCAService_WatchRootsClient_Trailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_Trailer_Call) Return(mD metadata.MD) *ConnectCAService_WatchRootsClient_Trailer_Call {
	_c.Call.Return(mD)
	return _c
}

func (_c *ConnectCAService_WatchRootsClient_Trailer_Call) RunAndReturn(run func() metadata.MD) *ConnectCAService_WatchRootsClient_Trailer_Call {
	_c.Call.Return(run)
	return _c
}

// NewConnectCAServiceServer creates a new instance of ConnectCAServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectCAServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectCAServiceServer {
	mock := &ConnectCAServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectCAServiceServer is an autogenerated mock type for the ConnectCAServiceServer type
type ConnectCAServiceServer struct {
	mock.Mock
}

type ConnectCAServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectCAServiceServer) EXPECT() *ConnectCAServiceServer_Expecter {
	return &ConnectCAServiceServer_Expecter{mock: &_m.Mock}
}

// Sign provides a mock function for the type ConnectCAServiceServer
func (_mock *ConnectCAServiceServer) Sign(context1 context.Context, signRequest *pbconnectca.SignRequest) (*pbconnectca.SignResponse, error) {
	ret := _mock.Called(context1, signRequest)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 *pbconnectca.SignResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.SignRequest) (*pbconnectca.SignResponse, error)); ok {
		return returnFunc(context1, signRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pbconnectca.SignRequest) *pbconnectca.SignResponse); ok {
		r0 = returnFunc(context1, signRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pbconnectca.SignResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *pbconnectca.SignRequest) error); ok {
		r1 = returnFunc(context1, signRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ConnectCAServiceServer_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type ConnectCAServiceServer_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - context1 context.Context
//   - signRequest *pbconnectca.SignRequest
func (_e *ConnectCAServiceServer_Expecter) Sign(context1 interface{}, signRequest interface{}) *ConnectCAServiceServer_Sign_Call {
	return &ConnectCAServiceServer_Sign_Call{Call: _e.mock.On("Sign", context1, signRequest)}
}

func (_c *ConnectCAServiceServer_Sign_Call) Run(run func(context1 context.Context, signRequest *pbconnectca.SignRequest)) *ConnectCAServiceServer_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pbconnectca.SignRequest
		if args[1] != nil {
			arg1 = args[1].(*pbconnectca.SignRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ConnectCAServiceServer_Sign_Call) Return(signResponse *pbconnectca.SignResponse, err error) *ConnectCAServiceServer_Sign_Call {
	_c.Call.Return(signResponse, err)
	return _c
}

func (_c *ConnectCAServiceServer_Sign_Call) RunAndReturn(run func(context1 context.Context, signRequest *pbconnectca.SignRequest) (*pbconnectca.SignResponse, error)) *ConnectCAServiceServer_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// WatchRoots provides a mock function for the type ConnectCAServiceServer
func (_mock *ConnectCAServiceServer) WatchRoots(watchRootsRequest *pbconnectca.WatchRootsRequest, serverStreamingServer grpc.ServerStreamingServer[pbconnectca.WatchRootsResponse]) error {
	ret := _mock.Called(watchRootsRequest, serverStreamingServer)

	if len(ret) == 0 {
		panic("no return value specified for WatchRoots")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*pbconnectca.WatchRootsRequest, grpc.ServerStreamingServer[pbconnectca.WatchRootsResponse]) error); ok {
		r0 = returnFunc(watchRootsRequest, serverStreamingServer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAServiceServer_WatchRoots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchRoots'
type ConnectCAServiceServer_WatchRoots_Call struct {
	*mock.Call
}

// WatchRoots is a helper method to define mock.On call
//   - watchRootsRequest *pbconnectca.WatchRootsRequest
//   - serverStreamingServer grpc.ServerStreamingServer[pbconnectca.WatchRootsResponse]
func (_e *ConnectCAServiceServer_Expecter) WatchRoots(watchRootsRequest interface{}, serverStreamingServer interface{}) *ConnectCAServiceServer_WatchRoots_Call {
	return &ConnectCAServiceServer_WatchRoots_Call{Call: _e.mock.On("WatchRoots", watchRootsRequest, serverStreamingServer)}
}

func (_c *ConnectCAServiceServer_WatchRoots_Call) Run(run func(watchRootsRequest *pbconnectca.WatchRootsRequest, serverStreamingServer grpc.ServerStreamingServer[pbconnectca.WatchRootsResponse])) *ConnectCAServiceServer_WatchRoots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pbconnectca.WatchRootsRequest
		if args[0] != nil {
			arg0 = args[0].(*pbconnectca.WatchRootsRequest)
		}
		var arg1 grpc.ServerStreamingServer[pbconnectca.WatchRootsResponse]
		if args[1] != nil {
			arg1 = args[1].(grpc.ServerStreamingServer[pbconnectca.WatchRootsResponse])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ConnectCAServiceServer_WatchRoots_Call) Return(err error) *ConnectCAServiceServer_WatchRoots_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAServiceServer_WatchRoots_Call) RunAndReturn(run func(watchRootsRequest *pbconnectca.WatchRootsRequest, serverStreamingServer grpc.ServerStreamingServer[pbconnectca.WatchRootsResponse]) error) *ConnectCAServiceServer_WatchRoots_Call {
	_c.Call.Return(run)
	return _c
}

// NewUnsafeConnectCAServiceServer creates a new instance of UnsafeConnectCAServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnsafeConnectCAServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UnsafeConnectCAServiceServer {
	mock := &UnsafeConnectCAServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UnsafeConnectCAServiceServer is an autogenerated mock type for the UnsafeConnectCAServiceServer type
type UnsafeConnectCAServiceServer struct {
	mock.Mock
}

type UnsafeConnectCAServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *UnsafeConnectCAServiceServer) EXPECT() *UnsafeConnectCAServiceServer_Expecter {
	return &UnsafeConnectCAServiceServer_Expecter{mock: &_m.Mock}
}

// mustEmbedUnimplementedConnectCAServiceServer provides a mock function for the type UnsafeConnectCAServiceServer
func (_mock *UnsafeConnectCAServiceServer) mustEmbedUnimplementedConnectCAServiceServer() {
	_mock.Called()
	return
}

// UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedConnectCAServiceServer'
type UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedConnectCAServiceServer is a helper method to define mock.On call
func (_e *UnsafeConnectCAServiceServer_Expecter) mustEmbedUnimplementedConnectCAServiceServer() *UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call {
	return &UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedConnectCAServiceServer")}
}

func (_c *UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call) Run(run func()) *UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call) Return() *UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call) RunAndReturn(run func()) *UnsafeConnectCAServiceServer_mustEmbedUnimplementedConnectCAServiceServer_Call {
	_c.Run(run)
	return _c
}

// NewConnectCAService_WatchRootsServer creates a new instance of ConnectCAService_WatchRootsServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectCAService_WatchRootsServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectCAService_WatchRootsServer {
	mock := &ConnectCAService_WatchRootsServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectCAService_WatchRootsServer is an autogenerated mock type for the ConnectCAService_WatchRootsServer type
type ConnectCAService_WatchRootsServer struct {
	mock.Mock
}

type ConnectCAService_WatchRootsServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectCAService_WatchRootsServer) EXPECT() *ConnectCAService_WatchRootsServer_Expecter {
	return &ConnectCAService_WatchRootsServer_Expecter{mock: &_m.Mock}
}

// Context provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) Context() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// ConnectCAService_WatchRootsServer_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type ConnectCAService_WatchRootsServer_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *ConnectCAService_WatchRootsServer_Expecter) Context() *ConnectCAService_WatchRootsServer_Context_Call {
	return &ConnectCAService_WatchRootsServer_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *ConnectCAService_WatchRootsServer_Context_Call) Run(run func()) *ConnectCAService_WatchRootsServer_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_Context_Call) Return(context1 context.Context) *ConnectCAService_WatchRootsServer_Context_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_Context_Call) RunAndReturn(run func() context.Context) *ConnectCAService_WatchRootsServer_Context_Call {
	_c.Call.Return(run)
	return _c
}

// RecvMsg provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) RecvMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for RecvMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_RecvMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecvMsg'
type ConnectCAService_WatchRootsServer_RecvMsg_Call struct {
	*mock.Call
}

// RecvMsg is a helper method to define mock.On call
//   - m any
func (_e *ConnectCAService_WatchRootsServer_Expecter) RecvMsg(m interface{}) *ConnectCAService_WatchRootsServer_RecvMsg_Call {
	return &ConnectCAService_WatchRootsServer_RecvMsg_Call{Call: _e.mock.On("RecvMsg", m)}
}

func (_c *ConnectCAService_WatchRootsServer_RecvMsg_Call) Run(run func(m any)) *ConnectCAService_WatchRootsServer_RecvMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_RecvMsg_Call) Return(err error) *ConnectCAService_WatchRootsServer_RecvMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_RecvMsg_Call) RunAndReturn(run func(m any) error) *ConnectCAService_WatchRootsServer_RecvMsg_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) Send(watchRootsResponse *pbconnectca.WatchRootsResponse) error {
	ret := _mock.Called(watchRootsResponse)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*pbconnectca.WatchRootsResponse) error); ok {
		r0 = returnFunc(watchRootsResponse)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type ConnectCAService_WatchRootsServer_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - watchRootsResponse *pbconnectca.WatchRootsResponse
func (_e *ConnectCAService_WatchRootsServer_Expecter) Send(watchRootsResponse interface{}) *ConnectCAService_WatchRootsServer_Send_Call {
	return &ConnectCAService_WatchRootsServer_Send_Call{Call: _e.mock.On("Send", watchRootsResponse)}
}

func (_c *ConnectCAService_WatchRootsServer_Send_Call) Run(run func(watchRootsResponse *pbconnectca.WatchRootsResponse)) *ConnectCAService_WatchRootsServer_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *pbconnectca.WatchRootsResponse
		if args[0] != nil {
			arg0 = args[0].(*pbconnectca.WatchRootsResponse)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_Send_Call) Return(err error) *ConnectCAService_WatchRootsServer_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_Send_Call) RunAndReturn(run func(watchRootsResponse *pbconnectca.WatchRootsResponse) error) *ConnectCAService_WatchRootsServer_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendHeader provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) SendHeader(mD metadata.MD) error {
	ret := _mock.Called(mD)

	if len(ret) == 0 {
		panic("no return value specified for SendHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = returnFunc(mD)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_SendHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHeader'
type ConnectCAService_WatchRootsServer_SendHeader_Call struct {
	*mock.Call
}

// SendHeader is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ConnectCAService_WatchRootsServer_Expecter) SendHeader(mD interface{}) *ConnectCAService_WatchRootsServer_SendHeader_Call {
	return &ConnectCAService_WatchRootsServer_SendHeader_Call{Call: _e.mock.On("SendHeader", mD)}
}

func (_c *ConnectCAService_WatchRootsServer_SendHeader_Call) Run(run func(mD metadata.MD)) *ConnectCAService_WatchRootsServer_SendHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SendHeader_Call) Return(err error) *ConnectCAService_WatchRootsServer_SendHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SendHeader_Call) RunAndReturn(run func(mD metadata.MD) error) *ConnectCAService_WatchRootsServer_SendHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SendMsg provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) SendMsg(m any) error {
	ret := _mock.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMsg")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_SendMsg_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMsg'
type ConnectCAService_WatchRootsServer_SendMsg_Call struct {
	*mock.Call
}

// SendMsg is a helper method to define mock.On call
//   - m any
func (_e *ConnectCAService_WatchRootsServer_Expecter) SendMsg(m interface{}) *ConnectCAService_WatchRootsServer_SendMsg_Call {
	return &ConnectCAService_WatchRootsServer_SendMsg_Call{Call: _e.mock.On("SendMsg", m)}
}

func (_c *ConnectCAService_WatchRootsServer_SendMsg_Call) Run(run func(m any)) *ConnectCAService_WatchRootsServer_SendMsg_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SendMsg_Call) Return(err error) *ConnectCAService_WatchRootsServer_SendMsg_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SendMsg_Call) RunAndReturn(run func(m any) error) *ConnectCAService_WatchRootsServer_SendMsg_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeader provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) SetHeader(mD metadata.MD) error {
	ret := _mock.Called(mD)

	if len(ret) == 0 {
		panic("no return value specified for SetHeader")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(metadata.MD) error); ok {
		r0 = returnFunc(mD)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectCAService_WatchRootsServer_SetHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeader'
type ConnectCAService_WatchRootsServer_SetHeader_Call struct {
	*mock.Call
}

// SetHeader is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ConnectCAService_WatchRootsServer_Expecter) SetHeader(mD interface{}) *ConnectCAService_WatchRootsServer_SetHeader_Call {
	return &ConnectCAService_WatchRootsServer_SetHeader_Call{Call: _e.mock.On("SetHeader", mD)}
}

func (_c *ConnectCAService_WatchRootsServer_SetHeader_Call) Run(run func(mD metadata.MD)) *ConnectCAService_WatchRootsServer_SetHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SetHeader_Call) Return(err error) *ConnectCAService_WatchRootsServer_SetHeader_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SetHeader_Call) RunAndReturn(run func(mD metadata.MD) error) *ConnectCAService_WatchRootsServer_SetHeader_Call {
	_c.Call.Return(run)
	return _c
}

// SetTrailer provides a mock function for the type ConnectCAService_WatchRootsServer
func (_mock *ConnectCAService_WatchRootsServer) SetTrailer(mD metadata.MD) {
	_mock.Called(mD)
	return
}

// ConnectCAService_WatchRootsServer_SetTrailer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTrailer'
type ConnectCAService_WatchRootsServer_SetTrailer_Call struct {
	*mock.Call
}

// SetTrailer is a helper method to define mock.On call
//   - mD metadata.MD
func (_e *ConnectCAService_WatchRootsServer_Expecter) SetTrailer(mD interface{}) *ConnectCAService_WatchRootsServer_SetTrailer_Call {
	return &ConnectCAService_WatchRootsServer_SetTrailer_Call{Call: _e.mock.On("SetTrailer", mD)}
}

func (_c *ConnectCAService_WatchRootsServer_SetTrailer_Call) Run(run func(mD metadata.MD)) *ConnectCAService_WatchRootsServer_SetTrailer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 metadata.MD
		if args[0] != nil {
			arg0 = args[0].(metadata.MD)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SetTrailer_Call) Return() *ConnectCAService_WatchRootsServer_SetTrailer_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectCAService_WatchRootsServer_SetTrailer_Call) RunAndReturn(run func(mD metadata.MD)) *ConnectCAService_WatchRootsServer_SetTrailer_Call {
	_c.Run(run)
	return _c
}
