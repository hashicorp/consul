// Code generated by mockery v2.32.4. DO NOT EDIT.

package blockingquery

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRequestOptions is an autogenerated mock type for the RequestOptions type
type MockRequestOptions struct {
	mock.Mock
}

// GetMaxQueryTime provides a mock function with given fields:
func (_m *MockRequestOptions) GetMaxQueryTime() (time.Duration, error) {
	ret := _m.Called()

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func() (time.Duration, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinQueryIndex provides a mock function with given fields:
func (_m *MockRequestOptions) GetMinQueryIndex() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetRequireConsistent provides a mock function with given fields:
func (_m *MockRequestOptions) GetRequireConsistent() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetToken provides a mock function with given fields:
func (_m *MockRequestOptions) GetToken() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockRequestOptions creates a new instance of MockRequestOptions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequestOptions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequestOptions {
	mock := &MockRequestOptions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
