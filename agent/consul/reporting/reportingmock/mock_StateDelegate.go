// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package reportingmock

import (
	"github.com/hashicorp/consul/agent/consul/state"
	"github.com/hashicorp/consul/agent/structs"
	"github.com/hashicorp/go-memdb"
	mock "github.com/stretchr/testify/mock"
)

// NewStateDelegate creates a new instance of StateDelegate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateDelegate(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateDelegate {
	mock := &StateDelegate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StateDelegate is an autogenerated mock type for the StateDelegate type
type StateDelegate struct {
	mock.Mock
}

type StateDelegate_Expecter struct {
	mock *mock.Mock
}

func (_m *StateDelegate) EXPECT() *StateDelegate_Expecter {
	return &StateDelegate_Expecter{mock: &_m.Mock}
}

// NodeUsage provides a mock function for the type StateDelegate
func (_mock *StateDelegate) NodeUsage() (uint64, state.NodeUsage, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeUsage")
	}

	var r0 uint64
	var r1 state.NodeUsage
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() (uint64, state.NodeUsage, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() uint64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func() state.NodeUsage); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(state.NodeUsage)
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// StateDelegate_NodeUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeUsage'
type StateDelegate_NodeUsage_Call struct {
	*mock.Call
}

// NodeUsage is a helper method to define mock.On call
func (_e *StateDelegate_Expecter) NodeUsage() *StateDelegate_NodeUsage_Call {
	return &StateDelegate_NodeUsage_Call{Call: _e.mock.On("NodeUsage")}
}

func (_c *StateDelegate_NodeUsage_Call) Run(run func()) *StateDelegate_NodeUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDelegate_NodeUsage_Call) Return(v uint64, nodeUsage state.NodeUsage, err error) *StateDelegate_NodeUsage_Call {
	_c.Call.Return(v, nodeUsage, err)
	return _c
}

func (_c *StateDelegate_NodeUsage_Call) RunAndReturn(run func() (uint64, state.NodeUsage, error)) *StateDelegate_NodeUsage_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceUsage provides a mock function for the type StateDelegate
func (_mock *StateDelegate) ServiceUsage(ws memdb.WatchSet, tenantUsage bool) (uint64, structs.ServiceUsage, error) {
	ret := _mock.Called(ws, tenantUsage)

	if len(ret) == 0 {
		panic("no return value specified for ServiceUsage")
	}

	var r0 uint64
	var r1 structs.ServiceUsage
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(memdb.WatchSet, bool) (uint64, structs.ServiceUsage, error)); ok {
		return returnFunc(ws, tenantUsage)
	}
	if returnFunc, ok := ret.Get(0).(func(memdb.WatchSet, bool) uint64); ok {
		r0 = returnFunc(ws, tenantUsage)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(memdb.WatchSet, bool) structs.ServiceUsage); ok {
		r1 = returnFunc(ws, tenantUsage)
	} else {
		r1 = ret.Get(1).(structs.ServiceUsage)
	}
	if returnFunc, ok := ret.Get(2).(func(memdb.WatchSet, bool) error); ok {
		r2 = returnFunc(ws, tenantUsage)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// StateDelegate_ServiceUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceUsage'
type StateDelegate_ServiceUsage_Call struct {
	*mock.Call
}

// ServiceUsage is a helper method to define mock.On call
//   - ws memdb.WatchSet
//   - tenantUsage bool
func (_e *StateDelegate_Expecter) ServiceUsage(ws interface{}, tenantUsage interface{}) *StateDelegate_ServiceUsage_Call {
	return &StateDelegate_ServiceUsage_Call{Call: _e.mock.On("ServiceUsage", ws, tenantUsage)}
}

func (_c *StateDelegate_ServiceUsage_Call) Run(run func(ws memdb.WatchSet, tenantUsage bool)) *StateDelegate_ServiceUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 memdb.WatchSet
		if args[0] != nil {
			arg0 = args[0].(memdb.WatchSet)
		}
		var arg1 bool
		if args[1] != nil {
			arg1 = args[1].(bool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *StateDelegate_ServiceUsage_Call) Return(v uint64, serviceUsage structs.ServiceUsage, err error) *StateDelegate_ServiceUsage_Call {
	_c.Call.Return(v, serviceUsage, err)
	return _c
}

func (_c *StateDelegate_ServiceUsage_Call) RunAndReturn(run func(ws memdb.WatchSet, tenantUsage bool) (uint64, structs.ServiceUsage, error)) *StateDelegate_ServiceUsage_Call {
	_c.Call.Return(run)
	return _c
}
