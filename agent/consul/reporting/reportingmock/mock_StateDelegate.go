// Code generated by mockery v2.53.5. DO NOT EDIT.

package reportingmock

import (
	memdb "github.com/hashicorp/go-memdb"
	mock "github.com/stretchr/testify/mock"

	state "github.com/hashicorp/consul/agent/consul/state"

	structs "github.com/hashicorp/consul/agent/structs"

	time "time"
)

// StateDelegate is an autogenerated mock type for the StateDelegate type
type StateDelegate struct {
	mock.Mock
}

// CensusListAll provides a mock function with no fields
func (_m *StateDelegate) CensusListAll() (uint64, []*state.CensusSnapshot, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CensusListAll")
	}

	var r0 uint64
	var r1 []*state.CensusSnapshot
	var r2 error
	if rf, ok := ret.Get(0).(func() (uint64, []*state.CensusSnapshot, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() []*state.CensusSnapshot); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*state.CensusSnapshot)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CensusPrune provides a mock function with given fields: idx, cutoff
func (_m *StateDelegate) CensusPrune(idx uint64, cutoff time.Time) (int, error) {
	ret := _m.Called(idx, cutoff)

	if len(ret) == 0 {
		panic("no return value specified for CensusPrune")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, time.Time) (int, error)); ok {
		return rf(idx, cutoff)
	}
	if rf, ok := ret.Get(0).(func(uint64, time.Time) int); ok {
		r0 = rf(idx, cutoff)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(uint64, time.Time) error); ok {
		r1 = rf(idx, cutoff)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CensusPut provides a mock function with given fields: idx, req
func (_m *StateDelegate) CensusPut(idx uint64, req *structs.CensusRequest) error {
	ret := _m.Called(idx, req)

	if len(ret) == 0 {
		panic("no return value specified for CensusPut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *structs.CensusRequest) error); ok {
		r0 = rf(idx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NodeUsage provides a mock function with no fields
func (_m *StateDelegate) NodeUsage() (uint64, state.NodeUsage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NodeUsage")
	}

	var r0 uint64
	var r1 state.NodeUsage
	var r2 error
	if rf, ok := ret.Get(0).(func() (uint64, state.NodeUsage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() state.NodeUsage); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(state.NodeUsage)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ServiceUsage provides a mock function with given fields: ws, tenantUsage
func (_m *StateDelegate) ServiceUsage(ws memdb.WatchSet, tenantUsage bool) (uint64, structs.ServiceUsage, error) {
	ret := _m.Called(ws, tenantUsage)

	if len(ret) == 0 {
		panic("no return value specified for ServiceUsage")
	}

	var r0 uint64
	var r1 structs.ServiceUsage
	var r2 error
	if rf, ok := ret.Get(0).(func(memdb.WatchSet, bool) (uint64, structs.ServiceUsage, error)); ok {
		return rf(ws, tenantUsage)
	}
	if rf, ok := ret.Get(0).(func(memdb.WatchSet, bool) uint64); ok {
		r0 = rf(ws, tenantUsage)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(memdb.WatchSet, bool) structs.ServiceUsage); ok {
		r1 = rf(ws, tenantUsage)
	} else {
		r1 = ret.Get(1).(structs.ServiceUsage)
	}

	if rf, ok := ret.Get(2).(func(memdb.WatchSet, bool) error); ok {
		r2 = rf(ws, tenantUsage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewStateDelegate creates a new instance of StateDelegate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateDelegate(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateDelegate {
	mock := &StateDelegate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
