// Code generated by mockery v2.53.5. DO NOT EDIT.

package reportingmock

import (
	mock "github.com/stretchr/testify/mock"

	structs "github.com/hashicorp/consul/agent/structs"
)

// ServerDelegate is an autogenerated mock type for the ServerDelegate type
type ServerDelegate struct {
	mock.Mock
}

// ApplyCensusRequest provides a mock function with given fields: req
func (_m *ServerDelegate) ApplyCensusRequest(req *structs.CensusRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for ApplyCensusRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*structs.CensusRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSystemMetadata provides a mock function with given fields: key
func (_m *ServerDelegate) GetSystemMetadata(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetSystemMetadata")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLeader provides a mock function with no fields
func (_m *ServerDelegate) IsLeader() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLeader")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetSystemMetadataKey provides a mock function with given fields: key, val
func (_m *ServerDelegate) SetSystemMetadataKey(key string, val string) error {
	ret := _m.Called(key, val)

	if len(ret) == 0 {
		panic("no return value specified for SetSystemMetadataKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServerDelegate creates a new instance of ServerDelegate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServerDelegate(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServerDelegate {
	mock := &ServerDelegate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
