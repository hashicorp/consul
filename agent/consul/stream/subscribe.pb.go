// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: subscribe.proto

package stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Topic int32

const (
	Topic_ServiceHealth        Topic = 0
	Topic_ServiceHealthConnect Topic = 1
	Topic_ACLTokens            Topic = 2
	Topic_ACLPolicies          Topic = 3
	Topic_ACLRoles             Topic = 4
)

var Topic_name = map[int32]string{
	0: "ServiceHealth",
	1: "ServiceHealthConnect",
	2: "ACLTokens",
	3: "ACLPolicies",
	4: "ACLRoles",
}

var Topic_value = map[string]int32{
	"ServiceHealth":        0,
	"ServiceHealthConnect": 1,
	"ACLTokens":            2,
	"ACLPolicies":          3,
	"ACLRoles":             4,
}

func (x Topic) String() string {
	return proto.EnumName(Topic_name, int32(x))
}

func (Topic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}

type CatalogOp int32

const (
	CatalogOp_Register   CatalogOp = 0
	CatalogOp_Deregister CatalogOp = 1
)

var CatalogOp_name = map[int32]string{
	0: "Register",
	1: "Deregister",
}

var CatalogOp_value = map[string]int32{
	"Register":   0,
	"Deregister": 1,
}

func (x CatalogOp) String() string {
	return proto.EnumName(CatalogOp_name, int32(x))
}

func (CatalogOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}

type ACLOp int32

const (
	ACLOp_Update ACLOp = 0
	ACLOp_Delete ACLOp = 1
)

var ACLOp_name = map[int32]string{
	0: "Update",
	1: "Delete",
}

var ACLOp_value = map[string]int32{
	"Update": 0,
	"Delete": 1,
}

func (x ACLOp) String() string {
	return proto.EnumName(ACLOp_name, int32(x))
}

func (ACLOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}

type ACLResource int32

const (
	ACLResource_ServiceACL ACLResource = 0
	ACLResource_NodeACL    ACLResource = 1
)

var ACLResource_name = map[int32]string{
	0: "ServiceACL",
	1: "NodeACL",
}

var ACLResource_value = map[string]int32{
	"ServiceACL": 0,
	"NodeACL":    1,
}

func (x ACLResource) String() string {
	return proto.EnumName(ACLResource_name, int32(x))
}

func (ACLResource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{3}
}

type SubscribeRequest struct {
	Topic                Topic    `protobuf:"varint,1,opt,name=Topic,proto3,enum=stream.Topic" json:"Topic,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Token                string   `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
	Index                uint64   `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	Filter               string   `protobuf:"bytes,5,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Datacenter           string   `protobuf:"bytes,6,opt,name=Datacenter,proto3" json:"Datacenter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_ServiceHealth
}

func (m *SubscribeRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SubscribeRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SubscribeRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SubscribeRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *SubscribeRequest) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

type Event struct {
	Topic        Topic      `protobuf:"varint,1,opt,name=Topic,proto3,enum=stream.Topic" json:"Topic,omitempty"`
	Key          string     `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Index        uint64     `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	RequiredACLs []*ACLRule `protobuf:"bytes,4,rep,name=RequiredACLs,proto3" json:"RequiredACLs,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Event_ServiceHealth
	//	*Event_ACLToken
	//	*Event_ACLPolicy
	//	*Event_ACLRole
	//	*Event_EndOfSnapshot
	//	*Event_ReloadStream
	Payload              isEvent_Payload `protobuf_oneof:"Payload"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Payload interface {
	isEvent_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_ServiceHealth struct {
	ServiceHealth *ServiceHealthUpdate `protobuf:"bytes,6,opt,name=ServiceHealth,proto3,oneof"`
}
type Event_ACLToken struct {
	ACLToken *ACLTokenUpdate `protobuf:"bytes,7,opt,name=ACLToken,proto3,oneof"`
}
type Event_ACLPolicy struct {
	ACLPolicy *ACLPolicyUpdate `protobuf:"bytes,8,opt,name=ACLPolicy,proto3,oneof"`
}
type Event_ACLRole struct {
	ACLRole *ACLRoleUpdate `protobuf:"bytes,9,opt,name=ACLRole,proto3,oneof"`
}
type Event_EndOfSnapshot struct {
	EndOfSnapshot bool `protobuf:"varint,10,opt,name=EndOfSnapshot,proto3,oneof"`
}
type Event_ReloadStream struct {
	ReloadStream bool `protobuf:"varint,11,opt,name=ReloadStream,proto3,oneof"`
}

func (*Event_ServiceHealth) isEvent_Payload() {}
func (*Event_ACLToken) isEvent_Payload()      {}
func (*Event_ACLPolicy) isEvent_Payload()     {}
func (*Event_ACLRole) isEvent_Payload()       {}
func (*Event_EndOfSnapshot) isEvent_Payload() {}
func (*Event_ReloadStream) isEvent_Payload()  {}

func (m *Event) GetPayload() isEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetTopic() Topic {
	if m != nil {
		return m.Topic
	}
	return Topic_ServiceHealth
}

func (m *Event) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Event) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Event) GetRequiredACLs() []*ACLRule {
	if m != nil {
		return m.RequiredACLs
	}
	return nil
}

func (m *Event) GetServiceHealth() *ServiceHealthUpdate {
	if x, ok := m.GetPayload().(*Event_ServiceHealth); ok {
		return x.ServiceHealth
	}
	return nil
}

func (m *Event) GetACLToken() *ACLTokenUpdate {
	if x, ok := m.GetPayload().(*Event_ACLToken); ok {
		return x.ACLToken
	}
	return nil
}

func (m *Event) GetACLPolicy() *ACLPolicyUpdate {
	if x, ok := m.GetPayload().(*Event_ACLPolicy); ok {
		return x.ACLPolicy
	}
	return nil
}

func (m *Event) GetACLRole() *ACLRoleUpdate {
	if x, ok := m.GetPayload().(*Event_ACLRole); ok {
		return x.ACLRole
	}
	return nil
}

func (m *Event) GetEndOfSnapshot() bool {
	if x, ok := m.GetPayload().(*Event_EndOfSnapshot); ok {
		return x.EndOfSnapshot
	}
	return false
}

func (m *Event) GetReloadStream() bool {
	if x, ok := m.GetPayload().(*Event_ReloadStream); ok {
		return x.ReloadStream
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_ServiceHealth)(nil),
		(*Event_ACLToken)(nil),
		(*Event_ACLPolicy)(nil),
		(*Event_ACLRole)(nil),
		(*Event_EndOfSnapshot)(nil),
		(*Event_ReloadStream)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// Payload
	switch x := m.Payload.(type) {
	case *Event_ServiceHealth:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ServiceHealth); err != nil {
			return err
		}
	case *Event_ACLToken:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ACLToken); err != nil {
			return err
		}
	case *Event_ACLPolicy:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ACLPolicy); err != nil {
			return err
		}
	case *Event_ACLRole:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ACLRole); err != nil {
			return err
		}
	case *Event_EndOfSnapshot:
		t := uint64(0)
		if x.EndOfSnapshot {
			t = 1
		}
		_ = b.EncodeVarint(10<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *Event_ReloadStream:
		t := uint64(0)
		if x.ReloadStream {
			t = 1
		}
		_ = b.EncodeVarint(11<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Event.Payload has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 6: // Payload.ServiceHealth
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ServiceHealthUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ServiceHealth{msg}
		return true, err
	case 7: // Payload.ACLToken
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ACLTokenUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ACLToken{msg}
		return true, err
	case 8: // Payload.ACLPolicy
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ACLPolicyUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ACLPolicy{msg}
		return true, err
	case 9: // Payload.ACLRole
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ACLRoleUpdate)
		err := b.DecodeMessage(msg)
		m.Payload = &Event_ACLRole{msg}
		return true, err
	case 10: // Payload.EndOfSnapshot
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Payload = &Event_EndOfSnapshot{x != 0}
		return true, err
	case 11: // Payload.ReloadStream
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Payload = &Event_ReloadStream{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// Payload
	switch x := m.Payload.(type) {
	case *Event_ServiceHealth:
		s := proto.Size(x.ServiceHealth)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ACLToken:
		s := proto.Size(x.ACLToken)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ACLPolicy:
		s := proto.Size(x.ACLPolicy)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ACLRole:
		s := proto.Size(x.ACLRole)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_EndOfSnapshot:
		n += 1 // tag and wire
		n += 1
	case *Event_ReloadStream:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ACLRule struct {
	Resource             ACLResource `protobuf:"varint,1,opt,name=Resource,proto3,enum=stream.ACLResource" json:"Resource,omitempty"`
	Segment              string      `protobuf:"bytes,2,opt,name=Segment,proto3" json:"Segment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ACLRule) Reset()         { *m = ACLRule{} }
func (m *ACLRule) String() string { return proto.CompactTextString(m) }
func (*ACLRule) ProtoMessage()    {}
func (*ACLRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}
func (m *ACLRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLRule.Merge(m, src)
}
func (m *ACLRule) XXX_Size() int {
	return m.Size()
}
func (m *ACLRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLRule.DiscardUnknown(m)
}

var xxx_messageInfo_ACLRule proto.InternalMessageInfo

func (m *ACLRule) GetResource() ACLResource {
	if m != nil {
		return m.Resource
	}
	return ACLResource_ServiceACL
}

func (m *ACLRule) GetSegment() string {
	if m != nil {
		return m.Segment
	}
	return ""
}

type ServiceHealthUpdate struct {
	Op                   CatalogOp         `protobuf:"varint,1,opt,name=Op,proto3,enum=stream.CatalogOp" json:"Op,omitempty"`
	CheckServiceNode     *CheckServiceNode `protobuf:"bytes,2,opt,name=CheckServiceNode,proto3" json:"CheckServiceNode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ServiceHealthUpdate) Reset()         { *m = ServiceHealthUpdate{} }
func (m *ServiceHealthUpdate) String() string { return proto.CompactTextString(m) }
func (*ServiceHealthUpdate) ProtoMessage()    {}
func (*ServiceHealthUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{3}
}
func (m *ServiceHealthUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceHealthUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceHealthUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceHealthUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHealthUpdate.Merge(m, src)
}
func (m *ServiceHealthUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ServiceHealthUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHealthUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHealthUpdate proto.InternalMessageInfo

func (m *ServiceHealthUpdate) GetOp() CatalogOp {
	if m != nil {
		return m.Op
	}
	return CatalogOp_Register
}

func (m *ServiceHealthUpdate) GetCheckServiceNode() *CheckServiceNode {
	if m != nil {
		return m.CheckServiceNode
	}
	return nil
}

type ACLTokenUpdate struct {
	Op                   ACLOp     `protobuf:"varint,1,opt,name=Op,proto3,enum=stream.ACLOp" json:"Op,omitempty"`
	Token                *ACLToken `protobuf:"bytes,2,opt,name=Token,proto3" json:"Token,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ACLTokenUpdate) Reset()         { *m = ACLTokenUpdate{} }
func (m *ACLTokenUpdate) String() string { return proto.CompactTextString(m) }
func (*ACLTokenUpdate) ProtoMessage()    {}
func (*ACLTokenUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{4}
}
func (m *ACLTokenUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLTokenUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLTokenUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLTokenUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLTokenUpdate.Merge(m, src)
}
func (m *ACLTokenUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ACLTokenUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLTokenUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ACLTokenUpdate proto.InternalMessageInfo

func (m *ACLTokenUpdate) GetOp() ACLOp {
	if m != nil {
		return m.Op
	}
	return ACLOp_Update
}

func (m *ACLTokenUpdate) GetToken() *ACLToken {
	if m != nil {
		return m.Token
	}
	return nil
}

type ACLPolicyUpdate struct {
	Op                   ACLOp    `protobuf:"varint,1,opt,name=Op,proto3,enum=stream.ACLOp" json:"Op,omitempty"`
	PolicyID             string   `protobuf:"bytes,2,opt,name=PolicyID,proto3" json:"PolicyID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACLPolicyUpdate) Reset()         { *m = ACLPolicyUpdate{} }
func (m *ACLPolicyUpdate) String() string { return proto.CompactTextString(m) }
func (*ACLPolicyUpdate) ProtoMessage()    {}
func (*ACLPolicyUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{5}
}
func (m *ACLPolicyUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLPolicyUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLPolicyUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLPolicyUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLPolicyUpdate.Merge(m, src)
}
func (m *ACLPolicyUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ACLPolicyUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLPolicyUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ACLPolicyUpdate proto.InternalMessageInfo

func (m *ACLPolicyUpdate) GetOp() ACLOp {
	if m != nil {
		return m.Op
	}
	return ACLOp_Update
}

func (m *ACLPolicyUpdate) GetPolicyID() string {
	if m != nil {
		return m.PolicyID
	}
	return ""
}

type ACLRoleUpdate struct {
	Op                   ACLOp    `protobuf:"varint,1,opt,name=Op,proto3,enum=stream.ACLOp" json:"Op,omitempty"`
	RoleID               string   `protobuf:"bytes,2,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACLRoleUpdate) Reset()         { *m = ACLRoleUpdate{} }
func (m *ACLRoleUpdate) String() string { return proto.CompactTextString(m) }
func (*ACLRoleUpdate) ProtoMessage()    {}
func (*ACLRoleUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{6}
}
func (m *ACLRoleUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ACLRoleUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ACLRoleUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ACLRoleUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLRoleUpdate.Merge(m, src)
}
func (m *ACLRoleUpdate) XXX_Size() int {
	return m.Size()
}
func (m *ACLRoleUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLRoleUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_ACLRoleUpdate proto.InternalMessageInfo

func (m *ACLRoleUpdate) GetOp() ACLOp {
	if m != nil {
		return m.Op
	}
	return ACLOp_Update
}

func (m *ACLRoleUpdate) GetRoleID() string {
	if m != nil {
		return m.RoleID
	}
	return ""
}

type TestRequest struct {
	Datacenter           string   `protobuf:"bytes,1,opt,name=Datacenter,proto3" json:"Datacenter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{7}
}
func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return m.Size()
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

func (m *TestRequest) GetDatacenter() string {
	if m != nil {
		return m.Datacenter
	}
	return ""
}

type TestResponse struct {
	ServerName           string   `protobuf:"bytes,1,opt,name=ServerName,proto3" json:"ServerName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{8}
}
func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(m, src)
}
func (m *TestResponse) XXX_Size() int {
	return m.Size()
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

func (m *TestResponse) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func init() {
	proto.RegisterEnum("stream.Topic", Topic_name, Topic_value)
	proto.RegisterEnum("stream.CatalogOp", CatalogOp_name, CatalogOp_value)
	proto.RegisterEnum("stream.ACLOp", ACLOp_name, ACLOp_value)
	proto.RegisterEnum("stream.ACLResource", ACLResource_name, ACLResource_value)
	proto.RegisterType((*SubscribeRequest)(nil), "stream.SubscribeRequest")
	proto.RegisterType((*Event)(nil), "stream.Event")
	proto.RegisterType((*ACLRule)(nil), "stream.ACLRule")
	proto.RegisterType((*ServiceHealthUpdate)(nil), "stream.ServiceHealthUpdate")
	proto.RegisterType((*ACLTokenUpdate)(nil), "stream.ACLTokenUpdate")
	proto.RegisterType((*ACLPolicyUpdate)(nil), "stream.ACLPolicyUpdate")
	proto.RegisterType((*ACLRoleUpdate)(nil), "stream.ACLRoleUpdate")
	proto.RegisterType((*TestRequest)(nil), "stream.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "stream.TestResponse")
}

func init() { proto.RegisterFile("subscribe.proto", fileDescriptor_38d2980c9543da44) }

var fileDescriptor_38d2980c9543da44 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x6e, 0xd3, 0x48,
	0x14, 0xb6, 0xf3, 0x9f, 0x93, 0x26, 0x71, 0xa7, 0xdd, 0xae, 0x95, 0xd5, 0x66, 0xb3, 0xde, 0x55,
	0x15, 0x22, 0x11, 0x20, 0x45, 0x82, 0xdb, 0xd4, 0x69, 0xd5, 0x8a, 0xa8, 0xa9, 0x9c, 0x22, 0xae,
	0x1d, 0xe7, 0xd0, 0x5a, 0x75, 0x6d, 0xe3, 0x99, 0x14, 0x7a, 0xc3, 0x73, 0xf0, 0x12, 0xbc, 0x07,
	0xdc, 0xf1, 0x08, 0xa8, 0xbc, 0x08, 0x9a, 0x19, 0xdb, 0xb5, 0x53, 0xa4, 0x5e, 0x70, 0xe7, 0xf3,
	0x9d, 0xef, 0x3b, 0x73, 0x7e, 0xe6, 0x8c, 0xa1, 0x4d, 0x57, 0x0b, 0xea, 0x44, 0xee, 0x02, 0x87,
	0x61, 0x14, 0xb0, 0x80, 0x54, 0x28, 0x8b, 0xd0, 0xbe, 0xea, 0x34, 0x29, 0x8b, 0x56, 0x0e, 0xa3,
	0x12, 0x36, 0x3e, 0xab, 0xa0, 0xcd, 0x13, 0xaa, 0x85, 0xef, 0x56, 0x48, 0x19, 0xf9, 0x0f, 0xca,
	0x67, 0x41, 0xe8, 0x3a, 0xba, 0xda, 0x53, 0xfb, 0xad, 0x51, 0x73, 0x28, 0xb5, 0x43, 0x01, 0x5a,
	0xd2, 0x47, 0x34, 0x28, 0xbe, 0xc2, 0x1b, 0xbd, 0xd0, 0x53, 0xfb, 0x75, 0x8b, 0x7f, 0x92, 0x6d,
	0x2e, 0xbb, 0x44, 0x5f, 0x2f, 0x0a, 0x4c, 0x1a, 0x1c, 0x3d, 0xf6, 0x97, 0xf8, 0x41, 0x2f, 0xf5,
	0xd4, 0x7e, 0xc9, 0x92, 0x06, 0xd9, 0x81, 0xca, 0xa1, 0xeb, 0x31, 0x8c, 0xf4, 0xb2, 0x20, 0xc7,
	0x16, 0xe9, 0x02, 0x4c, 0x6c, 0x66, 0x3b, 0xe8, 0x73, 0x5f, 0x45, 0xf8, 0x32, 0x88, 0xf1, 0xb5,
	0x08, 0xe5, 0x83, 0x6b, 0xf4, 0x7f, 0x27, 0x49, 0x99, 0x4e, 0x31, 0x9b, 0xce, 0x1e, 0x6c, 0xf0,
	0xe2, 0xdd, 0x08, 0x97, 0x63, 0x73, 0x4a, 0xf5, 0x52, 0xaf, 0xd8, 0x6f, 0x8c, 0xda, 0x49, 0xcc,
	0xb1, 0x39, 0xb5, 0x56, 0x1e, 0x5a, 0x39, 0x12, 0x31, 0xa1, 0x39, 0xc7, 0xe8, 0xda, 0x75, 0xf0,
	0x08, 0x6d, 0x8f, 0x5d, 0x88, 0x74, 0x1b, 0xa3, 0xbf, 0x12, 0x55, 0xce, 0xf9, 0x3a, 0x5c, 0xda,
	0x0c, 0x8f, 0x14, 0x2b, 0xaf, 0x21, 0xcf, 0xa1, 0x36, 0x36, 0xa7, 0xb2, 0x6f, 0x55, 0xa1, 0xdf,
	0xc9, 0x9c, 0x2a, 0xf0, 0x54, 0x9a, 0x32, 0xc9, 0x0b, 0xa8, 0x8f, 0xcd, 0xe9, 0x69, 0xe0, 0xb9,
	0xce, 0x8d, 0x5e, 0x13, 0xb2, 0x3f, 0x33, 0x32, 0xe9, 0x48, 0x75, 0x77, 0x5c, 0xf2, 0x0c, 0xaa,
	0xbc, 0x98, 0xc0, 0x43, 0xbd, 0x2e, 0x64, 0x7f, 0x64, 0x6b, 0x0c, 0x3c, 0x4c, 0x45, 0x09, 0x8f,
	0xec, 0x42, 0xf3, 0xc0, 0x5f, 0xce, 0xde, 0xce, 0x7d, 0x3b, 0xa4, 0x17, 0x01, 0xd3, 0xa1, 0xa7,
	0xf6, 0x6b, 0xbc, 0x92, 0x1c, 0x4c, 0xfe, 0xe7, 0x3d, 0xf4, 0x02, 0x7b, 0x39, 0x17, 0x01, 0xf5,
	0x46, 0x4c, 0xcb, 0xa1, 0xfb, 0x75, 0xa8, 0x9e, 0xda, 0x37, 0x1c, 0x30, 0xce, 0x64, 0x2e, 0x2b,
	0x0f, 0xc9, 0x13, 0xa8, 0x59, 0x48, 0x83, 0x55, 0xe4, 0x60, 0x3c, 0xcf, 0xad, 0x6c, 0x5e, 0xb1,
	0xcb, 0x4a, 0x49, 0x44, 0x87, 0xea, 0x1c, 0xcf, 0xaf, 0xd0, 0x67, 0xf1, 0x70, 0x13, 0xd3, 0xf8,
	0x08, 0x5b, 0xbf, 0x68, 0x3c, 0xf9, 0x17, 0x0a, 0xb3, 0x30, 0x8e, 0xbd, 0x99, 0xc4, 0x36, 0x6d,
	0x66, 0x7b, 0xc1, 0xf9, 0x2c, 0xb4, 0x0a, 0xb3, 0x90, 0x4c, 0x40, 0x33, 0x2f, 0xd0, 0xb9, 0x8c,
	0xe5, 0x27, 0xc1, 0x12, 0x45, 0xf0, 0xc6, 0x48, 0x4f, 0x05, 0x6b, 0x7e, 0xeb, 0x9e, 0xc2, 0x78,
	0x03, 0xad, 0xfc, 0xe0, 0xc8, 0xdf, 0x99, 0xa3, 0x9b, 0x99, 0xb2, 0xe2, 0x63, 0x77, 0x93, 0xb5,
	0x91, 0x67, 0x69, 0xeb, 0xe3, 0x8f, 0x17, 0xc9, 0x98, 0x42, 0x7b, 0x6d, 0xb4, 0x0f, 0x45, 0xee,
	0x40, 0x4d, 0xd2, 0x8f, 0x27, 0x71, 0x97, 0x52, 0xdb, 0x38, 0x84, 0x66, 0x6e, 0xe2, 0x0f, 0xc5,
	0xda, 0x81, 0x0a, 0x27, 0xa7, 0x91, 0x62, 0xcb, 0x78, 0x0c, 0x8d, 0x33, 0xa4, 0x2c, 0x79, 0x3a,
	0xf2, 0xfb, 0xab, 0xde, 0xdb, 0xdf, 0x21, 0x6c, 0x48, 0x3a, 0x0d, 0x03, 0x9f, 0x22, 0xe7, 0xf3,
	0xe6, 0x61, 0x74, 0x62, 0x5f, 0x61, 0xc2, 0xbf, 0x43, 0x06, 0x8b, 0x78, 0xcb, 0xc9, 0xe6, 0xda,
	0xb2, 0x69, 0x0a, 0xd1, 0x61, 0x3b, 0x07, 0x99, 0x81, 0xef, 0xa3, 0xc3, 0x34, 0x95, 0x34, 0xc5,
	0x7a, 0x88, 0xb6, 0x51, 0xad, 0x40, 0xda, 0xd0, 0x48, 0x3a, 0xe7, 0x22, 0xd5, 0x8a, 0x64, 0x43,
	0x2c, 0x1d, 0xaf, 0x80, 0x6a, 0xa5, 0xc1, 0x23, 0xa8, 0xa7, 0x17, 0x81, 0xbb, 0x2c, 0x3c, 0x77,
	0x29, 0xc3, 0x48, 0x53, 0x48, 0x0b, 0x60, 0x82, 0x51, 0x62, 0xab, 0x83, 0x7f, 0xa0, 0x2c, 0x5a,
	0x42, 0x00, 0x2a, 0xb2, 0x6f, 0x9a, 0xc2, 0xbf, 0x27, 0xe8, 0x21, 0x43, 0x4d, 0x1d, 0x0c, 0xc4,
	0x51, 0xe9, 0x35, 0x6d, 0xc9, 0xf2, 0x5c, 0x07, 0xc7, 0xe6, 0x54, 0x53, 0x48, 0x03, 0xaa, 0xfc,
	0x92, 0x70, 0x43, 0x1d, 0xbd, 0x87, 0x8a, 0x19, 0xf8, 0x74, 0xe5, 0x91, 0x97, 0x50, 0x4f, 0x1f,
	0x61, 0x92, 0x5e, 0xb6, 0xf5, 0x77, 0xb9, 0x93, 0x8e, 0x45, 0xbc, 0x80, 0x86, 0xf2, 0x54, 0x25,
	0x7b, 0x50, 0xe2, 0xfd, 0x24, 0xe9, 0xba, 0x64, 0x86, 0xd1, 0xd9, 0xce, 0x83, 0xb2, 0xe5, 0x86,
	0xb2, 0xaf, 0x7d, 0xb9, 0xed, 0xaa, 0xdf, 0x6e, 0xbb, 0xea, 0xf7, 0xdb, 0xae, 0xfa, 0xe9, 0x47,
	0x57, 0x59, 0x54, 0xc4, 0xdf, 0x60, 0xef, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0xce, 0xf5,
	0xe5, 0x37, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsulClient is the client API for Consul service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsulClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Consul_SubscribeClient, error)
	// Test is only used internally for testing connectivity/balancing logic.
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type consulClient struct {
	cc *grpc.ClientConn
}

func NewConsulClient(cc *grpc.ClientConn) ConsulClient {
	return &consulClient{cc}
}

func (c *consulClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Consul_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Consul_serviceDesc.Streams[0], "/stream.Consul/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &consulSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Consul_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type consulSubscribeClient struct {
	grpc.ClientStream
}

func (x *consulSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *consulClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/stream.Consul/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsulServer is the server API for Consul service.
type ConsulServer interface {
	Subscribe(*SubscribeRequest, Consul_SubscribeServer) error
	// Test is only used internally for testing connectivity/balancing logic.
	Test(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedConsulServer can be embedded to have forward compatible implementations.
type UnimplementedConsulServer struct {
}

func (*UnimplementedConsulServer) Subscribe(req *SubscribeRequest, srv Consul_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedConsulServer) Test(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterConsulServer(s *grpc.Server, srv ConsulServer) {
	s.RegisterService(&_Consul_serviceDesc, srv)
}

func _Consul_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsulServer).Subscribe(m, &consulSubscribeServer{stream})
}

type Consul_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type consulSubscribeServer struct {
	grpc.ServerStream
}

func (x *consulSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Consul_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsulServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stream.Consul/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsulServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consul_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Consul",
	HandlerType: (*ConsulServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Consul_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Consul_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "subscribe.proto",
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Topic))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Index))
	}
	if len(m.Filter) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	}
	if len(m.Datacenter) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Datacenter)))
		i += copy(dAtA[i:], m.Datacenter)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Topic != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Topic))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Index))
	}
	if len(m.RequiredACLs) > 0 {
		for _, msg := range m.RequiredACLs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSubscribe(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Payload != nil {
		nn1, err1 := m.Payload.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Event_ServiceHealth) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ServiceHealth != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ServiceHealth.Size()))
		n2, err2 := m.ServiceHealth.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}
func (m *Event_ACLToken) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ACLToken != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ACLToken.Size()))
		n3, err3 := m.ACLToken.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}
func (m *Event_ACLPolicy) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ACLPolicy != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ACLPolicy.Size()))
		n4, err4 := m.ACLPolicy.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	return i, nil
}
func (m *Event_ACLRole) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ACLRole != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.ACLRole.Size()))
		n5, err5 := m.ACLRole.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	return i, nil
}
func (m *Event_EndOfSnapshot) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x50
	i++
	if m.EndOfSnapshot {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *Event_ReloadStream) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x58
	i++
	if m.ReloadStream {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *ACLRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Resource != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Resource))
	}
	if len(m.Segment) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Segment)))
		i += copy(dAtA[i:], m.Segment)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServiceHealthUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceHealthUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if m.CheckServiceNode != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.CheckServiceNode.Size()))
		n6, err6 := m.CheckServiceNode.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACLTokenUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLTokenUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if m.Token != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Token.Size()))
		n7, err7 := m.Token.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACLPolicyUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLPolicyUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if len(m.PolicyID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.PolicyID)))
		i += copy(dAtA[i:], m.PolicyID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ACLRoleUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ACLRoleUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(m.Op))
	}
	if len(m.RoleID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.RoleID)))
		i += copy(dAtA[i:], m.RoleID)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datacenter) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.Datacenter)))
		i += copy(dAtA[i:], m.Datacenter)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ServerName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSubscribe(dAtA, i, uint64(len(m.ServerName)))
		i += copy(dAtA[i:], m.ServerName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSubscribe(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovSubscribe(uint64(m.Topic))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovSubscribe(uint64(m.Index))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != 0 {
		n += 1 + sovSubscribe(uint64(m.Topic))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovSubscribe(uint64(m.Index))
	}
	if len(m.RequiredACLs) > 0 {
		for _, e := range m.RequiredACLs {
			l = e.Size()
			n += 1 + l + sovSubscribe(uint64(l))
		}
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event_ServiceHealth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceHealth != nil {
		l = m.ServiceHealth.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_ACLToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ACLToken != nil {
		l = m.ACLToken.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_ACLPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ACLPolicy != nil {
		l = m.ACLPolicy.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_ACLRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ACLRole != nil {
		l = m.ACLRole.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	return n
}
func (m *Event_EndOfSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *Event_ReloadStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *ACLRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != 0 {
		n += 1 + sovSubscribe(uint64(m.Resource))
	}
	l = len(m.Segment)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceHealthUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	if m.CheckServiceNode != nil {
		l = m.CheckServiceNode.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACLTokenUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	if m.Token != nil {
		l = m.Token.Size()
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACLPolicyUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	l = len(m.PolicyID)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ACLRoleUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovSubscribe(uint64(m.Op))
	}
	l = len(m.RoleID)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Datacenter)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovSubscribe(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSubscribe(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSubscribe(x uint64) (n int) {
	return sovSubscribe(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= Topic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datacenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			m.Topic = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Topic |= Topic(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredACLs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredACLs = append(m.RequiredACLs, &ACLRule{})
			if err := m.RequiredACLs[len(m.RequiredACLs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ServiceHealthUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ServiceHealth{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACLToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ACLTokenUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ACLToken{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACLPolicy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ACLPolicyUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ACLPolicy{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACLRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ACLRoleUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Event_ACLRole{v}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndOfSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Payload = &Event_EndOfSnapshot{b}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReloadStream", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Payload = &Event_ReloadStream{b}
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			m.Resource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Resource |= ACLResource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceHealthUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceHealthUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceHealthUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= CatalogOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckServiceNode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckServiceNode == nil {
				m.CheckServiceNode = &CheckServiceNode{}
			}
			if err := m.CheckServiceNode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLTokenUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLTokenUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLTokenUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ACLOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Token == nil {
				m.Token = &ACLToken{}
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLPolicyUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLPolicyUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLPolicyUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ACLOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ACLRoleUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACLRoleUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACLRoleUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= ACLOp(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datacenter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datacenter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubscribe
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubscribe
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSubscribe(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSubscribe
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubscribe(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubscribe
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubscribe
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubscribe
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSubscribe
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSubscribe
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSubscribe(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSubscribe
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSubscribe = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubscribe   = fmt.Errorf("proto: integer overflow")
)
