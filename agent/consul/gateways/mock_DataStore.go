// Code generated by mockery v2.12.2. DO NOT EDIT.

package gateways

import (
	acl "github.com/hashicorp/consul/acl"
	mock "github.com/stretchr/testify/mock"

	structs "github.com/hashicorp/consul/agent/structs"

	testing "testing"
)

// MockDataStore is an autogenerated mock type for the DataStore type
type MockDataStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: entry
func (_m *MockDataStore) Delete(entry structs.ConfigEntry) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(structs.ConfigEntry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfigEntriesByKind provides a mock function with given fields: kind
func (_m *MockDataStore) GetConfigEntriesByKind(kind string) ([]structs.ConfigEntry, error) {
	ret := _m.Called(kind)

	var r0 []structs.ConfigEntry
	if rf, ok := ret.Get(0).(func(string) []structs.ConfigEntry); ok {
		r0 = rf(kind)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]structs.ConfigEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(kind)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigEntry provides a mock function with given fields: kind, name, meta
func (_m *MockDataStore) GetConfigEntry(kind string, name string, meta *acl.EnterpriseMeta) (structs.ConfigEntry, error) {
	ret := _m.Called(kind, name, meta)

	var r0 structs.ConfigEntry
	if rf, ok := ret.Get(0).(func(string, string, *acl.EnterpriseMeta) structs.ConfigEntry); ok {
		r0 = rf(kind, name, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(structs.ConfigEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *acl.EnterpriseMeta) error); ok {
		r1 = rf(kind, name, meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: entry
func (_m *MockDataStore) Update(entry structs.ConfigEntry) error {
	ret := _m.Called(entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(structs.ConfigEntry) error); ok {
		r0 = rf(entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: entry, err
func (_m *MockDataStore) UpdateStatus(entry structs.ControlledConfigEntry, err error) error {
	ret := _m.Called(entry, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(structs.ControlledConfigEntry, error) error); ok {
		r0 = rf(entry, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDataStore creates a new instance of MockDataStore. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDataStore(t testing.TB) *MockDataStore {
	mock := &MockDataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
