// Code generated by mockery v2.11.0. DO NOT EDIT.

package cachetype

import (
	local "github.com/hashicorp/consul/agent/local"
	memdb "github.com/hashicorp/go-memdb"

	mock "github.com/stretchr/testify/mock"

	structs "github.com/hashicorp/consul/agent/structs"

	testing "testing"

	time "time"
)

// MockAgent is an autogenerated mock type for the Agent type
type MockAgent struct {
	mock.Mock
}

// LocalBlockingQuery provides a mock function with given fields: alwaysBlock, hash, wait, fn
func (_m *MockAgent) LocalBlockingQuery(alwaysBlock bool, hash string, wait time.Duration, fn func(memdb.WatchSet) (string, interface{}, error)) (string, interface{}, error) {
	ret := _m.Called(alwaysBlock, hash, wait, fn)

	var r0 string
	if rf, ok := ret.Get(0).(func(bool, string, time.Duration, func(memdb.WatchSet) (string, interface{}, error)) string); ok {
		r0 = rf(alwaysBlock, hash, wait, fn)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func(bool, string, time.Duration, func(memdb.WatchSet) (string, interface{}, error)) interface{}); ok {
		r1 = rf(alwaysBlock, hash, wait, fn)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(bool, string, time.Duration, func(memdb.WatchSet) (string, interface{}, error)) error); ok {
		r2 = rf(alwaysBlock, hash, wait, fn)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LocalState provides a mock function with given fields:
func (_m *MockAgent) LocalState() *local.State {
	ret := _m.Called()

	var r0 *local.State
	if rf, ok := ret.Get(0).(func() *local.State); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*local.State)
		}
	}

	return r0
}

// ServiceHTTPBasedChecks provides a mock function with given fields: id
func (_m *MockAgent) ServiceHTTPBasedChecks(id structs.ServiceID) []structs.CheckType {
	ret := _m.Called(id)

	var r0 []structs.CheckType
	if rf, ok := ret.Get(0).(func(structs.ServiceID) []structs.CheckType); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]structs.CheckType)
		}
	}

	return r0
}

// NewMockAgent creates a new instance of MockAgent. It also registers a cleanup function to assert the mocks expectations.
func NewMockAgent(t testing.TB) *MockAgent {
	mock := &MockAgent{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
