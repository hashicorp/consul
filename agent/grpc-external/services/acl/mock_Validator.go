// Code generated by mockery v2.15.0. DO NOT EDIT.

package acl

import (
	context "context"

	authmethod "github.com/hashicorp/consul/agent/consul/authmethod"

	mock "github.com/stretchr/testify/mock"
)

// MockValidator is an autogenerated mock type for the Validator type
type MockValidator struct {
	mock.Mock
}

// ValidateLogin provides a mock function with given fields: ctx, loginToken
func (_m *MockValidator) ValidateLogin(ctx context.Context, loginToken string) (*authmethod.Identity, error) {
	ret := _m.Called(ctx, loginToken)

	var r0 *authmethod.Identity
	if rf, ok := ret.Get(0).(func(context.Context, string) *authmethod.Identity); ok {
		r0 = rf(ctx, loginToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*authmethod.Identity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, loginToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockValidator interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockValidator creates a new instance of MockValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockValidator(t mockConstructorTestingTNewMockValidator) *MockValidator {
	mock := &MockValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
