{
  "status": "success",
  "data": {
    "resultType": "matrix",
    "result": [
      ${
        // We need 15 minutes worth of data at 10 second resoution. Currently we
        // always query for two series together so loop twice over this.
        [0, 1].map(function(i){
          var timePeriodMins = 15;
          var resolutionSecs = 10;
          var numPoints = (timePeriodMins*60)/resolutionSecs;
          var time = (Date.now()/1000) - (timePeriodMins*60);

          var q = location.search.query;
          var proto = "tcp";
          var range = 1000;
          var riseBias = 10;
          var fallBias = 10;
          var volatility = 0.2;
          var label = "";

          if (q.match('envoy_listener_http_downstream_rq_xx')) {
            proto = "http"
            // Switch random value ranges for total vs error rates
            switch(i) {
              case 0:
                range = 1000; // up to 1000 rps for success
                label = "Successes";
                break;
              case 1:
                range = 500; // up to 500 errors per second
                fallBias = 1; // fall quicker than we rise
                riseBias = 30; // start low generally
                volatility = 1;
                label = "Errors";
                break;
            }
          } else {
            // Type tcp
            switch(i) {
              case 0:
                range = 0.5 * 1e9; // up to 500 mbps recieved
                label = "Inbound";
                break;
              case 1:
                range = 1e9; // up to 1 gbps
                label = "Outbound"
                break;
            }
          }

          var randExp = function(max, lambda) {
            return (-Math.log(1-(1-Math.exp(-lambda))*Math.random())/lambda) * max;
          }

          // Starting value
          var value = randExp(range, riseBias);
          if (value > range) {
            value = range;
          }

          var points = [];
          for (var i = 0; i < numPoints; i++) {
            points.push(`[${time}, "${value}"]`);
            time = time + resolutionSecs;
            var rising = (Math.random() > 0.5);
            delta = volatility * randExp(range, rising ? riseBias : fallBias);
            if (!rising) {
              // Make it a negative change
              delta = 0-delta;
            }
            value = value + delta
            if (value > range) {
              value = range;
            }
            if (value < 0) {
              value = 0;
            }
          }
          return `
          {
            "metric": {"label": "${label}"},
            "values": [${points.join(",")}]
          }`;
        })
      }
    ]
  }
}