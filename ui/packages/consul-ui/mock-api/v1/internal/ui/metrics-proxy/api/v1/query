{
  "status": "success",
  "data": {
    "resultType": "vector",
    "result": [
      ${
        [1].map(function(_){
          var type = "service";
          var proto = "tcp";

          var q = location.search.query;

          // Match the relabel arguments since "downstream" appears in both
          // "service" and "upstream" type queries' metric names while
          // "upstream" appears in downstream query metric names (confusingly).
          if (q.match('"upstream"')) {
            type = "upstream";
          } else if (q.match('"downstream"')) {
            type = "downstream";
          }

          if (q.match('envoy_http_')) {
            proto = "http";
          }

          // NOTE!!! The logic below to pick the upstream/downstream service
          // names must exactly match the logic in internal/ui/service-topology/_
          // If you change this, change it there too!

          // Pick a number of down/upstreams to return based on the cookie variable.
          // If you change anything about this variable or it's default, you'll need
          // to change the topology endpoint to match.
          var numResults = 1;
          if (type === "upstream") {
            numResults = env("CONSUL_UPSTREAM_COUNT", 3);
          }
          if (type === "downstream") {
            numResults = env("CONSUL_DOWNSTREAM_COUNT", 5);
          }

          var genFakeServiceNames = function(num) {
            // Seed faker by the number of results we want to make it deterministic
            // here and in other correlated endpoints.
            fake.seed(num);
            var serviceNames = [];
            for (var i = 0; i < num; i++) {
              serviceNames.push(`service-${fake.random.number({min:0, max:99})}`)
            }
            return serviceNames
          };

          // Figure out the actual name for the target service
          var targetService = "invalid-local-cluster";
          var m = q.match(/local_cluster="([^"]*)"/);
          if (m && m.length >= 2 && m[1] != "") {
            targetService = m[1];
          }
          m = q.match(/consul_service="([^"]*)"/);
          if (type == "downstream" && m && m.length >= 2 && m[1] != "") {
            // downstreams don't have the same selector for the main service
            // name.
            targetService = m[1];
          }

          var serviceNames = [];
          switch(type) {
            case "downstream": // fallthrough
            case "upstream":
              serviceNames = genFakeServiceNames(numResults);
              break;
            default:
              // fallthrough
            case "service":
              serviceNames = [targetService];
              break;
          }

          // little helper to get a deterministic number from the target service
          // name string. NOTE: this should be the same as in service-topology
          // endpoint so metrics match what is requested.
          var hashStr = function(s) {
            for(var i = 0, h = 0xdeadbeef; i < s.length; i++)
                h = Math.imul(h ^ s.charCodeAt(i), 2654435761);
            return (h ^ h >>> 16) >>> 0;
          };

          var serviceProto = "tcp"
          // Randomly pick the serviceProtocol which will affect which types of
          // stats we return for downstream clusters. But we need it to be
          // deterministic for a given service name so that all the downstream
          // stats are consistently typed.
          fake.seed(hashStr(targetService))
          if (fake.random.number(1) > 0.5) {
            serviceProto = "http";
          }

          // For up/downstreams only return HTTP metrics half of the time.

          // For upstreams it's based on the upstream's protocol which might be
          // mixed so alternate protocols for upstreams.
          if (type == "upstream") {
            // Pretend all odd service indexes are tcp and even are http
            var wantMod = 0;
            if (proto == "tcp") {
              wantMod = 1;
            }
            serviceNames = serviceNames.filter(function(x, i){ return i%2 == wantMod })
          }
          // For downstreams it's based on the target's protocol which we
          // don't really know but all downstreams should be the same type
          // so only return metrics for that protocol.
          if (type == "downstream" && proto == "http" && serviceProto != "http") {
            serviceNames = [];
          }

          // Work out which metric is being queried to make them more realistic.
          var range = 100;
          switch(proto) {
            case "http":
              if (q.match('envoy_response_code_class="5"')) {
                // It's error rate make it a percentage
                range = 30;
              } else if (q.match("rq_completed")) {
                // Requests per second
                range = 1000;
              } else if (q.match("quantile\\(0.99")) {
                // 99 percentile time in ms make it longer than 50 percentile
                range = 5000;
              } else if (q.match("quantile\\(0.5")) {
                // 50th percentile
                range = 500;
              }
              break;
            case "tcp":
              if (q.match('cx_total')) {
                // New conns per second
                range = 100;
              } else if (q.match('cx_rx_bytes')) {
                // inbound data rate tends to be lower than outbound
                range = 0.5 * 1e9;
              } else if (q.match('cx_tx_bytes')) {
                // inbound data rate
                range = 1e9;
              }
              // no route/connect faile are OK with default 0-100
              break;
          }

          var randExp = function(max, lambda) {
            return (-Math.log(1-(1-Math.exp(-lambda))*Math.random())/lambda) * max;
          }

          // Now generate the data points
          return serviceNames.map(function(name, i){
            var metric = `{}`;
            switch(type) {
              default:
                break;
              case "upstream":
                // TODO: this should really return tcp proxy label for tcp
                // metrics but we don't look at that for now.
                metric = `{"upstream": "${name}", "envoy_http_conn_manager_prefix": "${name}"}`;
                break;
              case "downstream":
                metric = `{"downstream": "${name}", "local_cluster": "${name}"}`;
                break;
            }
            return `{
              "metric": ${metric},
              "value": [
               ${Date.now()/1000},
               "${randExp(range, 20)}"
              ]
            }`;
          }).join(",")

        })[0]
      }
    ]
  }
}
