<div
  class={{class-map
    'consul-peer-form-generate'
  }}
  ...attributes
>
  <StateMachine
    @src={{require './chart.xstate' from="/components/consul/peer/form/generate"}}
    @initial={{if @regenerate 'loading' 'idle'}}
  as |fsm|>

  {{#let
    (unique-id)
  as |id reset|}}
    <form
      {{on 'submit' (fn fsm.dispatch 'LOAD')}}
      id={{id}}
    >

      <fsm.State @matches={{array 'idle'}}>
        {{yield (hash
          Fieldsets=(component "consul/peer/form/generate/fieldsets"
            item=@item
          )
          Actions=(component "consul/peer/form/generate/actions"
            item=@item
            id=id
          )
        )}}
      </fsm.State>

      <fsm.State @matches={{'loading'}}>
        <DataSource
          @src={{uri '/${partition}/${nspace}/${dc}/peering/token-for/${name}'
            (hash
              partition=@item.Partition
              nspace=''
              dc=@item.Datacenter
              name=@item.Name
            )
          }}
          @onchange={{queue
            @onchange
            (pick 'data' (fn fsm.dispatch 'SUCCESS'))
          }}
        />
      </fsm.State>

      <fsm.State @matches={{'success'}}>
        {{yield (hash
          Fieldsets=(component "consul/peer/form/token/fieldsets"
            item=@item
            token=fsm.state.context.PeeringToken
            regenerate=@regenerate
            onclick=(queue
              (set @item 'Name' '')
              (fn fsm.dispatch 'RESET')
            )
          )
          Actions=(component "consul/peer/form/token/actions"
            token=fsm.state.context.PeeringToken
            item=@item
            id=id
          )
        )}}
      </fsm.State>

    </form>
  {{/let}}

  </StateMachine>
</div>
