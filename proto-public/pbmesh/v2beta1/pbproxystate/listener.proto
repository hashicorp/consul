// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

package hashicorp.consul.mesh.v2beta1.pbproxystate;

import "google/protobuf/wrappers.proto";
import "pbmesh/v2beta1/pbproxystate/address.proto";
import "pbmesh/v2beta1/pbproxystate/cluster.proto";
import "pbmesh/v2beta1/pbproxystate/traffic_permissions.proto";
import "pbmesh/v2beta1/pbproxystate/transport_socket.proto";

message Listener {
  // name is the name of the listener.
  string name = 1;
  // direction tells the listener the direction of traffic.
  Direction direction = 2;
  // bind_address describes where to listen.
  oneof bind_address {
    HostPortAddress host_port = 3;
    UnixSocketAddress unix_socket = 4;
  }

  // routers describes how to route traffic from this listener.
  repeated Router routers = 5;
  // default_router describes where to route if none of the other router matches match the connection.
  Router default_router = 6;
  // capabilities describe Envoy proxy functionality to enable. These map closely to Envoy listener filters.
  repeated Capability capabilities = 7;
  // balance_connections configures how the listener should balance connections.
  BalanceConnections balance_connections = 8;
  // escape_hatch_listener_json configures a user configured escape hatch listener.
  string escape_hatch_listener = 9;
  // use_escape_hatch_tracing configures whether to use the top level user configured tracing escape hatch for this listener.
  bool use_escape_hatch_tracing = 10;
}

// +kubebuilder:validation:Enum=DIRECTION_UNSPECIFIED;DIRECTION_INBOUND;DIRECTION_OUTBOUND
// +kubebuilder:validation:Type=string
enum Direction {
  // DIRECTION_UNSPECIFIED is used by mesh gateway listeners.
  DIRECTION_UNSPECIFIED = 0;
  DIRECTION_INBOUND = 1;
  DIRECTION_OUTBOUND = 2;
}

// +kubebuilder:validation:Enum=BALANCE_CONNECTIONS_DEFAULT;BALANCE_CONNECTIONS_EXACT
// +kubebuilder:validation:Type=string
enum BalanceConnections {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  BALANCE_CONNECTIONS_DEFAULT = 0;
  BALANCE_CONNECTIONS_EXACT = 1;
}

// Capabilities map to proxy functionality to enable. These enable tproxy, l7 protocol/alpn inspection, or l4 sni/alpn inspection.
//
// +kubebuilder:validation:Enum=CAPABILITY_TRANSPARENT;CAPABILITY_L7_PROTOCOL_INSPECTION;CAPABILITY_L4_TLS_INSPECTION
// +kubebuilder:validation:Type=string
enum Capability {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  CAPABILITY_TRANSPARENT = 0;
  CAPABILITY_L7_PROTOCOL_INSPECTION = 1;
  CAPABILITY_L4_TLS_INSPECTION = 2;
}

message Router {
  // match specifies how to match traffic coming into this listener. If the traffic matches, it will be routed to the
  // destination.
  Match match = 1;
  oneof destination {
    // l4 is an l4 destination to route to, which will have a reference to a cluster.
    L4Destination l4 = 2;
    // l7 is an l7 destination to route to, which will have a reference to a route.
    L7Destination l7 = 3;
    // sni is an SNI destination, which means there will be no references, but the SNI name will be tied to the cluster
    // name, so we should generate all clusters.
    SNIDestination sni = 4;
  }
  // inbound_tls is used by inbound listeners that terminate TLS.
  TransportSocket inbound_tls = 5;
}

message Match {
  repeated string alpn_protocols = 1;
  google.protobuf.UInt32Value destination_port = 2;
  repeated CidrRange prefix_ranges = 3;
  repeated CidrRange source_prefix_ranges = 4;
  // server_names matches based on SNI of the incoming request.
  repeated string server_names = 5;
}

message CidrRange {
  string address_prefix = 1;
  google.protobuf.UInt32Value prefix_len = 2;
}

message L4Destination {
  // destination is one or more clusters to route to.
  oneof destination {
    DestinationCluster cluster = 1;
    L4WeightedClusterGroup weighted_clusters = 2;
  }
  // stat_prefix is for compatibility with v1 xds configuration, so it is generated in exactly the same way.
  string stat_prefix = 3;
  // traffic_permissions is a list of traffic permissions for this destination.
  TrafficPermissions traffic_permissions = 4;
  // max_inbound_connections specifies how many connections this destination can accept.
  uint64 max_inbound_connections = 5;
}

message L7DestinationRoute {
  // name is a key in the top level routes map. This specifies which route to go to in this L7 destination.
  string name = 1;
}

message L7Destination {
  // route specifies which route to go to in this L7 destination.
  L7DestinationRoute route = 1;
  // stat_prefix is for compatibility with v1 xds configuration, so it is generated in exactly the same way.
  string stat_prefix = 2;
  // protocol for the destination.
  L7Protocol protocol = 3;
  // traffic_permissions is a list of intentions for this destination.
  TrafficPermissions traffic_permissions = 4;
  // include_xfcc specifies whether to add an xfcc policy for handling xfcc headers.
  bool include_xfcc_policy = 5;
  // xfcc_policy determines how to handle xfcc headers.
  XFCCPolicy xfcc_policy = 6;
  // parse_xfcc_headers determines whether to add filters to parse xfcc headers on incoming connections.
  bool parse_xfcc_headers = 7;
  // static_route specifies whether this is a static route that is inlined in the listener filter. This is required to
  // match existing xds config.
  bool static_route = 8;
  // max_inbound_connections specifies how many connections this destination can accept.
  uint64 max_inbound_connections = 9;
}

// +kubebuilder:validation:Enum=XFCC_POLICY_SANITIZE;XFCC_POLICY_FORWARD_ONLY;XFCC_POLICY_APPEND_FORWARD;XFCC_POLICY_SANITIZE_SET;XFCC_POLICY_ALWAYS_FORWARD_ONLY
// +kubebuilder:validation:Type=string
enum XFCCPolicy {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  // Do not send the XFCC header to the next hop. This is the default value.
  XFCC_POLICY_SANITIZE = 0;
  // When the client connection is mTLS (Mutual TLS), forward the XFCC header
  // in the request.
  XFCC_POLICY_FORWARD_ONLY = 1;
  // When the client connection is mTLS, append the client certificate
  // information to the requestâ€™s XFCC header and forward it.
  XFCC_POLICY_APPEND_FORWARD = 2;
  // When the client connection is mTLS, reset the XFCC header with the client
  // certificate information and send it to the next hop.
  XFCC_POLICY_SANITIZE_SET = 3;
  // Always forward the XFCC header in the request, regardless of whether the
  // client connection is mTLS.
  XFCC_POLICY_ALWAYS_FORWARD_ONLY = 4;
}

// +kubebuilder:validation:Enum=L7_PROTOCOL_HTTP;L7_PROTOCOL_HTTP2;L7_PROTOCOL_GRPC
// +kubebuilder:validation:Type=string
enum L7Protocol {
  // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
  L7_PROTOCOL_HTTP = 0;
  L7_PROTOCOL_HTTP2 = 1;
  L7_PROTOCOL_GRPC = 2;
}

message SNIDestination {
  // stat_prefix is for compatibility with v1 xds configuration, so it is generated in exactly the same way.
  string stat_prefix = 1;
}
