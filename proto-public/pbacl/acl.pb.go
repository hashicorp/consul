// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: pbacl/acl.proto

package pbacl

import (
	_ "github.com/hashicorp/consul/proto-public/annotations/ratelimit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	mi := &file_pbacl_acl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbacl_acl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_pbacl_acl_proto_rawDescGZIP(), []int{0}
}

type LoginRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// auth_method is the name of the configured auth method that will be used to
	// validate the presented bearer token.
	AuthMethod string `protobuf:"bytes,1,opt,name=auth_method,json=authMethod,proto3" json:"auth_method,omitempty"`
	// bearer_token is a token produced by a trusted identity provider as
	// configured by the auth method.
	BearerToken string `protobuf:"bytes,2,opt,name=bearer_token,json=bearerToken,proto3" json:"bearer_token,omitempty"`
	// meta is a collection of arbitrary key-value pairs associated to the token,
	// it is useful for tracking the origin of tokens.
	Meta map[string]string `protobuf:"bytes,3,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// namespace (enterprise only) is the namespace in which the auth method
	// resides.
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// partition (enterprise only) is the partition in which the auth method
	// resides.
	Partition string `protobuf:"bytes,5,opt,name=partition,proto3" json:"partition,omitempty"`
	// datacenter is the target datacenter in which the request will be processed.
	Datacenter    string `protobuf:"bytes,6,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_pbacl_acl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbacl_acl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_pbacl_acl_proto_rawDescGZIP(), []int{1}
}

func (x *LoginRequest) GetAuthMethod() string {
	if x != nil {
		return x.AuthMethod
	}
	return ""
}

func (x *LoginRequest) GetBearerToken() string {
	if x != nil {
		return x.BearerToken
	}
	return ""
}

func (x *LoginRequest) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *LoginRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *LoginRequest) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *LoginRequest) GetDatacenter() string {
	if x != nil {
		return x.Datacenter
	}
	return ""
}

type LoginResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// token is the generated ACL token.
	Token         *LoginToken `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_pbacl_acl_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pbacl_acl_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_pbacl_acl_proto_rawDescGZIP(), []int{2}
}

func (x *LoginResponse) GetToken() *LoginToken {
	if x != nil {
		return x.Token
	}
	return nil
}

type LoginToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// accessor_id is a UUID used to identify the ACL token.
	AccessorId string `protobuf:"bytes,1,opt,name=accessor_id,json=accessorId,proto3" json:"accessor_id,omitempty"`
	// secret_id is a UUID presented as a credential by clients.
	SecretId      string `protobuf:"bytes,2,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginToken) Reset() {
	*x = LoginToken{}
	mi := &file_pbacl_acl_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginToken) ProtoMessage() {}

func (x *LoginToken) ProtoReflect() protoreflect.Message {
	mi := &file_pbacl_acl_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginToken.ProtoReflect.Descriptor instead.
func (*LoginToken) Descriptor() ([]byte, []int) {
	return file_pbacl_acl_proto_rawDescGZIP(), []int{3}
}

func (x *LoginToken) GetAccessorId() string {
	if x != nil {
		return x.AccessorId
	}
	return ""
}

func (x *LoginToken) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

type LogoutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// token is the ACL token's secret ID.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// datacenter is the target datacenter in which the request will be processed.
	Datacenter    string `protobuf:"bytes,2,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	mi := &file_pbacl_acl_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pbacl_acl_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_pbacl_acl_proto_rawDescGZIP(), []int{4}
}

func (x *LogoutRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LogoutRequest) GetDatacenter() string {
	if x != nil {
		return x.Datacenter
	}
	return ""
}

var File_pbacl_acl_proto protoreflect.FileDescriptor

const file_pbacl_acl_proto_rawDesc = "" +
	"\n" +
	"\x0fpbacl/acl.proto\x12\x14hashicorp.consul.acl\x1a%annotations/ratelimit/ratelimit.proto\"\x10\n" +
	"\x0eLogoutResponse\"\xa9\x02\n" +
	"\fLoginRequest\x12\x1f\n" +
	"\vauth_method\x18\x01 \x01(\tR\n" +
	"authMethod\x12!\n" +
	"\fbearer_token\x18\x02 \x01(\tR\vbearerToken\x12@\n" +
	"\x04meta\x18\x03 \x03(\v2,.hashicorp.consul.acl.LoginRequest.MetaEntryR\x04meta\x12\x1c\n" +
	"\tnamespace\x18\x04 \x01(\tR\tnamespace\x12\x1c\n" +
	"\tpartition\x18\x05 \x01(\tR\tpartition\x12\x1e\n" +
	"\n" +
	"datacenter\x18\x06 \x01(\tR\n" +
	"datacenter\x1a7\n" +
	"\tMetaEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"G\n" +
	"\rLoginResponse\x126\n" +
	"\x05token\x18\x01 \x01(\v2 .hashicorp.consul.acl.LoginTokenR\x05token\"J\n" +
	"\n" +
	"LoginToken\x12\x1f\n" +
	"\vaccessor_id\x18\x01 \x01(\tR\n" +
	"accessorId\x12\x1b\n" +
	"\tsecret_id\x18\x02 \x01(\tR\bsecretId\"E\n" +
	"\rLogoutRequest\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x1e\n" +
	"\n" +
	"datacenter\x18\x02 \x01(\tR\n" +
	"datacenter2\xc7\x01\n" +
	"\n" +
	"ACLService\x12Z\n" +
	"\x05Login\x12\".hashicorp.consul.acl.LoginRequest\x1a#.hashicorp.consul.acl.LoginResponse\"\b\xe2\x86\x04\x04\b\x03\x10\x01\x12]\n" +
	"\x06Logout\x12#.hashicorp.consul.acl.LogoutRequest\x1a$.hashicorp.consul.acl.LogoutResponse\"\b\xe2\x86\x04\x04\b\x03\x10\x01B\xc6\x01\n" +
	"\x18com.hashicorp.consul.aclB\bAclProtoP\x01Z.github.com/hashicorp/consul/proto-public/pbacl\xa2\x02\x03HCA\xaa\x02\x14Hashicorp.Consul.Acl\xca\x02\x14Hashicorp\\Consul\\Acl\xe2\x02 Hashicorp\\Consul\\Acl\\GPBMetadata\xea\x02\x16Hashicorp::Consul::Aclb\x06proto3"

var (
	file_pbacl_acl_proto_rawDescOnce sync.Once
	file_pbacl_acl_proto_rawDescData []byte
)

func file_pbacl_acl_proto_rawDescGZIP() []byte {
	file_pbacl_acl_proto_rawDescOnce.Do(func() {
		file_pbacl_acl_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pbacl_acl_proto_rawDesc), len(file_pbacl_acl_proto_rawDesc)))
	})
	return file_pbacl_acl_proto_rawDescData
}

var file_pbacl_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pbacl_acl_proto_goTypes = []any{
	(*LogoutResponse)(nil), // 0: hashicorp.consul.acl.LogoutResponse
	(*LoginRequest)(nil),   // 1: hashicorp.consul.acl.LoginRequest
	(*LoginResponse)(nil),  // 2: hashicorp.consul.acl.LoginResponse
	(*LoginToken)(nil),     // 3: hashicorp.consul.acl.LoginToken
	(*LogoutRequest)(nil),  // 4: hashicorp.consul.acl.LogoutRequest
	nil,                    // 5: hashicorp.consul.acl.LoginRequest.MetaEntry
}
var file_pbacl_acl_proto_depIdxs = []int32{
	5, // 0: hashicorp.consul.acl.LoginRequest.meta:type_name -> hashicorp.consul.acl.LoginRequest.MetaEntry
	3, // 1: hashicorp.consul.acl.LoginResponse.token:type_name -> hashicorp.consul.acl.LoginToken
	1, // 2: hashicorp.consul.acl.ACLService.Login:input_type -> hashicorp.consul.acl.LoginRequest
	4, // 3: hashicorp.consul.acl.ACLService.Logout:input_type -> hashicorp.consul.acl.LogoutRequest
	2, // 4: hashicorp.consul.acl.ACLService.Login:output_type -> hashicorp.consul.acl.LoginResponse
	0, // 5: hashicorp.consul.acl.ACLService.Logout:output_type -> hashicorp.consul.acl.LogoutResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pbacl_acl_proto_init() }
func file_pbacl_acl_proto_init() {
	if File_pbacl_acl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pbacl_acl_proto_rawDesc), len(file_pbacl_acl_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pbacl_acl_proto_goTypes,
		DependencyIndexes: file_pbacl_acl_proto_depIdxs,
		MessageInfos:      file_pbacl_acl_proto_msgTypes,
	}.Build()
	File_pbacl_acl_proto = out.File
	file_pbacl_acl_proto_goTypes = nil
	file_pbacl_acl_proto_depIdxs = nil
}
